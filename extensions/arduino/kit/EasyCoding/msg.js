/* eslint-disable func-style */
/* eslint-disable max-len */
/* eslint-disable require-jsdoc */
function addMsg (Blockly) {
    Object.assign(Blockly.ScratchMsgs.locales.en, {

     
        KS_VARIABLE_LABEL:'Variable Type',
        KS_variables_declare:'Declare %1 variable Type %2 Name %3 Assigned to %4',
        KS_variables_set:'Set %1 variable by %2',
        KS_variables_change:'Change %1 variable mode %2',
        KS_variables_value: 'variable %1',
        KS_variables_setString:'Set %1 String variable by %2',
        KS_global:'Global',
        KS_local:'Local',
        KS_MATH_INT: 'int',
        KS_MATH_LONG: 'long',
        KS_MATH_FLOAT: 'float',
        KS_MATH_BOOLEAN: 'boolean',
        KS_MATH_BYTE: 'byte',
        KS_MATH_CHAR: 'char',
        KS_MATH_STRING: 'string',
        KS_MATH_UNSIGNED_INT: 'unsigned int',
        KS_MATH_WORD: 'word',
        KS_MATH_UNSIGNED_LONG: 'unsigned long',
        KS_MATH_UNSIGNED_CHAR: 'unsigned char',
        KS_MATH_DOUBLE: 'double',
        BT_SERIAL_CATEGORY: 'Read Bluetooth',
        BLE_DATA: 'Serial readStringUntil #',
        KS_TEXT_LABEL:'TEXT',
        KS_char: 'char%1',
        KS_string: 'string%1',
        KS_data: '%1',

        KS_LOGIC_LABEL:'logic',
        KS_judge:'%1 %2 %3',
        BUTTON_CATEGORY: 'Button',
        BUTTON_READ_STATE: 'Button %1 was be pushed?',
        BUTTON_READ_VALUE: 'The state value of button is? %1',

        TOUCHSWITCH_CATEGORY: 'Touch',
        TOUCHSWITCH_STATE: 'Touch %1 was be touched?',
        TOUCHSWITCH_READ_VALUE: 'The value of touch is? %1?',
        
        BUZZER_CATEGORY: 'Muisc',
        BUZZER_TONE: 'Music PIN#%1 frequency%2',
        BUZZER_TONE_D: 'Music PIN#%1 frequency%2 duration%3',
        BUZZER_MUSIC: 'Muisc PIN#%1 play music%2',
        BUZZER_NOTONE: 'no music%1',
  
        BBRGBLEDSTRIP_CATEGORY: 'RGB',
       
        BBRGBLEDSTRIP_INIT: 'init RGB length %1 pin %2',
        BBRGBLEDSTRIP_DISPLAY: 'RGB brightness%1 clour%2 %3 display%4 ',
        BBRGBLEDSTRIP_SETPIXELCOLOR: 'set pixel %1 color %2',
        BBRGBLEDSTRIP_FILL: 'fill from pixel %1 count %2 with color %3',
        BBRGBLEDSTRIP_COLOR: 'RGB color R %1 G %2 B %3',
        BBRGBLEDSTRIP_SETBRIGHTNESS: 'set brightness %1',
        RGB_CHANGE: 'set RGB pin %1 brightness%2  time of full clour change%3',
        RGB_LOOP: 'set RGB pin %1 brightness%2  time of full clour loop%3',
        BBRGBLEDSTRIP_CLEAR: 'clear all',
        BBRGBLEDSTRIP_SHOW: 'refresh',
    
        AHT21_CATEGORY: 'Temperature and humidity',
        AHT20_21: 'Temperature and humidity get %1',
  
        ANALOGVOICE_CATEGORY: 'Sound ',
        ANALOGVOICE_READ_VALUE: 'read the value of sound %1',
        CURRENT_CATEGORY: 'current',
        CURRENT_READ_VALUE: 'read the value of current',
        MPU6050_CATEGORY: 'Acceleration',
        MPU6050_INIT: 'init MPU6050',
        MPU6050_REFRESH: 'MPU6050 refresh data',

        MPU6050_READ: 'MPU605 read %1',
        WIFI_CATEGORY: 'WIFI',
        WIFI_INIT: 'wifi connect ssid:%1 password:%2',
        WIFI_READ_IP: 'WiFi read ip',
        SD_CATEGORY: 'SD card',
        SD_INIT: 'init SD card  CS: %1 MOSI:%2 MISO:%3 SCK:%4',
        SD_REFRESH: 'SD refresh data',
        SD_TYPE: 'SD type',
        SD_LIST: 'list files',
        SD_VAR: 'SD %1',
        SD_JUDGE: '%1 File Exist?',
        SD_DELETE: 'delete %1',
        SD_READ: 'read %1',
        SD_WRITE: 'write SD File %1 Data %2 NewLine %3',
        LIGHTSENSOR_CATEGORY: 'Light',
        LIGHTSENSOR_READ_VALUE: 'read the value of light %1',

    });
    Object.assign(Blockly.ScratchMsgs.locales['de'], {
        KS_VARIABLE_LABEL:'Variablentyp',
        KS_variables_declare:'Deklarieren Sie %1 Variablentyp %2 Name %3 Zugewiesen an %4',
        KS_variables_set:'Variable %1 um %2 setzen',
        KS_variables_change:'Variablenmodus %1 %2 ändern',
        KS_variables_value: 'Variable %1',
        KS_variables_setString:'Setze %1 String-Variable um %2',
        KS_global:'Global',
        KS_local:'Lokal',
        KS_MATH_INT: 'int',
        KS_MATH_LONG: 'lang',
        KS_MATH_FLOAT: 'float',
        KS_MATH_BOOLEAN: 'boolean',
        KS_MATH_BYTE: 'Byte',
        KS_MATH_CHAR: 'char',
        KS_MATH_STRING: 'Zeichenfolge',
        KS_MATH_UNSIGNED_INT: 'unsigned int',
        KS_MATH_WORD: 'Wort',
        KS_MATH_UNSIGNED_LONG: 'unsigned long',
        KS_MATH_UNSIGNED_CHAR: 'unsigned char',
        KS_MATH_DOUBLE: 'double',
        BT_SERIAL_CATEGORY: 'Bluetooth lesen',
        BLE_DATA: 'Serial readStringUntil #',
        KS_TEXT_LABEL:'TEXT',
        KS_char: 'char%1',
        KS_string: 'string%1',
        KS_data: '%1',

        KS_LOGIC_LABEL:'Logik',
        KS_judge:'%1 %2 %3',
        BUTTON_CATEGORY: 'Schaltfläche',
        BUTTON_READ_STATE: 'Knopf %1 wurde gedrückt?',
        BUTTON_READ_VALUE: 'Der Statuswert der Schaltfläche ist? %1',

        TOUCHSWITCH_CATEGORY: 'Berühren',
        TOUCHSWITCH_STATE: 'Berührung %1 wurde berührt?',
        TOUCHSWITCH_READ_VALUE: 'Der Wert der Berührung ist? %1?',
       
        BUZZER_CATEGORY: 'Musik',
        BUZZER_TONE: 'Musik-PIN#%1 Frequenz%2',
        BUZZER_TONE_D: 'Musik-PIN#%1 Häufigkeit%2 Dauer%3',
        BUZZER_MUSIC: 'Musik PIN#%1 Musik abspielen%2',
        BUZZER_NOTONE: 'keine Musik%1',
 
        BBRGBLEDSTRIP_CATEGORY: 'RGB',
      
        BBRGBLEDSTRIP_INIT: 'init RGB-Länge %1 Pin %2',
        BBRGBLEDSTRIP_DISPLAY: 'RGB-Helligkeit%1 Farbe%2 %3 Anzeige%4 ',
        BBRGBLEDSTRIP_SETPIXELCOLOR: 'Pixel %1 Farbe %2 festlegen',
        BBRGBLEDSTRIP_FILL: 'Von Pixel %1 Anzahl %2 mit Farbe %3 füllen',
        BBRGBLEDSTRIP_COLOR: 'RGB-Farbe R %1 G %2 B %3',
        BBRGBLEDSTRIP_SETBRIGHTNESS: 'Helligkeit %1 einstellen',
        RGB_CHANGE: 'RGB-Pin %1 Helligkeit%2 Zeitpunkt der vollständigen Farbänderung festlegen%3',
        RGB_LOOP: 'Setze RGB-Pin %1 Helligkeit%2 Zeit der vollständigen Farbschleife%3',
        BBRGBLEDSTRIP_CLEAR: 'Alles löschen',
        BBRGBLEDSTRIP_SHOW: 'aktualisieren',
   
        AHT21_CATEGORY: 'Temperatur und Luftfeuchtigkeit',
        AHT20_21: 'Temperatur und Luftfeuchtigkeit erhalten %1',
 
        ANALOGVOICE_CATEGORY: 'Ton',
        ANALOGVOICE_READ_VALUE: 'den Wert von Ton %1 lesen',
        CURRENT_CATEGORY: 'aktuell',
        CURRENT_READ_VALUE: 'den Wert von aktuell lesen',
        MPU6050_CATEGORY: 'Beschleunigung',
        MPU6050_INIT: 'MPU6050 initialisieren',
        MPU6050_REFRESH: 'MPU6050 Daten aktualisieren',

        MPU6050_READ: 'MPU605 hat %1 gelesen',
        WIFI_CATEGORY: 'WIFI',
        WIFI_INIT: 'wifi connect ssid:%1 passwort:%2',
        WIFI_READ_IP: 'WiFi liest IP',
        SD_CATEGORY: 'SD-Karte',
        SD_INIT: 'SD-Karten-CS initialisieren: %1 MOSI:%2 MISO:%3 SCK:%4',
        SD_REFRESH: 'SD Daten aktualisieren',
        SD_TYPE: 'SD-Typ cs# %1',
        SD_LIST: 'Dateien im SD-Root auflisten',
        SD_VAR: 'SD %1',
        SD_JUDGE: '%1 Datei vorhanden?',
        SD_DELETE: '%1 löschen',
        SD_READ: '%1 lesen',
        SD_WRITE: 'SD-Datei %1 Daten %2 NewLine %3 schreiben',
        LIGHTSENSOR_CATEGORY: 'Licht',
        LIGHTSENSOR_READ_VALUE: 'den Lichtwert %1 lesen',
    });
    Object.assign(Blockly.ScratchMsgs.locales['es'], {
        KS_VARIABLE_LABEL:'Tipo de variable',
        KS_variables_declare:'Declarar %1 variable Tipo %2 Nombre %3 Asignado a %4',
        KS_variables_set:'Establecer %1 variable por %2',
        KS_variables_change:'Cambiar %1 modo variable %2',
        KS_variables_value: 'variable %1',
        KS_variables_setString:'Establecer %1 variable de cadena por %2',
        KS_global:'Global',
        KS_local:'Local',
        KS_MATH_INT: 'int',
        KS_MATH_LONG: 'largo',
        KS_MATH_FLOAT: 'flotante',
        KS_MATH_BOOLEAN: 'booleano',
        KS_MATH_BYTE: 'byte',
        KS_MATH_CHAR: 'carácter',
        KS_MATH_STRING: 'cadena',
        KS_MATH_UNSIGNED_INT: 'int sin firmar',
        KS_MATH_WORD: 'palabra',
        KS_MATH_UNSIGNED_LONG: 'largo sin firmar',
        KS_MATH_UNSIGNED_CHAR: 'caracter sin firmar',
        KS_MATH_DOUBLE: 'doble',
        BT_SERIAL_CATEGORY: 'Leer Bluetooth',
        BLE_DATA: 'Serial readStringHasta #',
        KS_TEXT_LABEL:'TEXTO',
        KS_char: 'char%1',
        KS_string: 'cadena%1',
        KS_data: '%1',

        KS_LOGIC_LABEL:'lógica',
        KS_judge:'%1 %2 %3',
        BUTTON_CATEGORY: 'Botón',
        BUTTON_READ_STATE: '¿Se presionó el botón %1?',
        BUTTON_READ_VALUE: '¿El valor de estado del botón es? %1',

        TOUCHSWITCH_CATEGORY: 'Tocar',
        TOUCHSWITCH_STATE: '¿Tocar %1 fue tocado?',
        TOUCHSWITCH_READ_VALUE: '¿El valor del toque es? %1?',
       
        BUZZER_CATEGORY: 'Música',
        BUZZER_TONE: 'PIN de música n.º %1 frecuencia%2',
        BUZZER_TONE_D: 'PIN de música#%1 frecuencia%2 duración%3',
        BUZZER_MUSIC: 'PIN de música#%1 reproducir música%2',
        BUZZER_NOTONE: 'sin música%1',
 
        BBRGBLEDSTRIP_CATEGORY: 'RGB',
      
        BBRGBLEDSTRIP_INIT: 'iniciar longitud RGB %1 pin %2',
        BBRGBLEDSTRIP_DISPLAY: 'Brillo RGB%1 color%2 %3 pantalla%4 ',
        BBRGBLEDSTRIP_SETPIXELCOLOR: 'establecer píxel %1 color %2',
        BBRGBLEDSTRIP_FILL: 'rellenar desde el píxel %1 contar %2 con el color %3',
        BBRGBLEDSTRIP_COLOR: 'Color RGB R %1 G %2 B %3',
        BBRGBLEDSTRIP_SETBRIGHTNESS: 'establecer brillo %1',
        RGB_CHANGE: 'establecer pin RGB %1 brillo%2 tiempo de cambio de color completo%3',
        RGB_LOOP: 'establecer pin RGB %1 brillo%2 tiempo de bucle de color completo%3',
        BBRGBLEDSTRIP_CLEAR: 'borrar todo',
        BBRGBLEDSTRIP_SHOW: 'actualizar',
   
        AHT21_CATEGORY: 'Temperatura y humedad',
        AHT20_21: 'Temperatura y humedad alcanzan %1',
 
        ANALOGVOICE_CATEGORY: 'Sonido',
        ANALOGVOICE_READ_VALUE: 'leer el valor del sonido %1',
        CATEGORÍA_ACTUAL: 'actual',
        CURRENT_READ_VALUE: 'leer el valor del actual',
        MPU6050_CATEGORY: 'Aceleración',
        MPU6050_INIT: 'iniciar MPU6050',
        MPU6050_REFRESH: 'MPU6050 actualizar datos',

        MPU6050_READ: 'MPU605 lectura %1',
        WIFI_CATEGORÍA: 'WIFI',
        WIFI_INIT: 'wifi connect ssid:%1 contraseña:%2',
        WIFI_READ_IP: 'WiFi leer ip',
        SD_CATEGORY: 'Tarjeta SD',
        SD_INIT: 'iniciar tarjeta SD CS: %1 MOSI:%2 MISO:%3 SCK:%4',
        SD_REFRESH: 'SD actualizar datos',
        SD_TYPE: 'SD tipo cs# %1',
        SD_LIST: 'listar archivos en SD root',
        SD_VAR: 'SD %1',
        SD_JUDGE: '¿%1 archivo existe?',
        SD_DELETE: 'eliminar %1',
        SD_READ: 'leer %1',
        SD_WRITE: 'escribir archivo SD %1 Datos %2 NewLine %3',
        LIGHTSENSOR_CATEGORY: 'Luz',
        LIGHTSENSOR_READ_VALUE: 'leer el valor de la luz %1',
    });
    Object.assign(Blockly.ScratchMsgs.locales['fr'], {
        KS_VARIABLE_LABEL:'Type de variable',
         KS_variables_declare:'Déclarer %1 variable Type %2 Nom %3 Attribué à %4',
         KS_variables_set: 'Définir la variable %1 par %2',
         KS_variables_change:'Changer %1 mode variable %2',
         KS_variables_value: 'variable %1',
         KS_variables_setString: 'Définir la variable chaîne %1 par %2',
         KS_global:'Global',
         KS_local:'Local',
         KS_MATH_INT: 'entier',
         KS_MATH_LONG: 'long',
         KS_MATH_FLOAT: 'flottant',
         KS_MATH_BOOLEAN: 'booléen',
         KS_MATH_BYTE: 'octet',
         KS_MATH_CHAR: 'car',
         KS_MATH_STRING: 'chaîne',
         KS_MATH_UNSIGNED_INT: 'entier non signé',
         KS_MATH_WORD: 'mot',
         KS_MATH_UNSIGNED_LONG: 'long non signé',
         KS_MATH_UNSIGNED_CHAR: 'caractère non signé',
         KS_MATH_DOUBLE: 'doubler',
         BT_SERIAL_CATEGORY: 'Lire Bluetooth',
         BLE_DATA: 'Serial readStringUntil #',
         KS_TEXT_LABEL:'TEXTE',
         KS_char: 'car%1',
         KS_string: 'chaîne%1',
         KS_data: '%1',

         KS_LOGIC_LABEL:'logique',
         KS_judge:'%1 %2 %3',
         BUTTON_CATEGORY: 'Bouton',
         BUTTON_READ_STATE: 'Le bouton %1 a été poussé?',
         BUTTON_READ_VALUE: 'La valeur d"état du bouton est? %1',

         TOUCHSWITCH_CATEGORY: "Toucher",
         TOUCHSWITCH_STATE: 'Le toucher %1 a été touché?',
         TOUCHSWITCH_READ_VALUE: 'La valeur du toucher est? %1?',
        
         BUZZER_CATEGORY: "Musique",
         BUZZER_TONE: 'NIP musical#%1 fréquence%2',
         BUZZER_TONE_D: 'NIP musical#%1 fréquence%2 durée%3',
         BUZZER_MUSIC: 'NIP musical #%1 jouer de la musique%2',
         BUZZER_NOTONE: 'pas de musique%1',
  
         BBRGBLEDSTRIP_CATEGORY: 'RVB',
       
         BBRGBLEDSTRIP_INIT: 'init longueur RVB %1 broche %2',
         BBRGBLEDSTRIP_DISPLAY: 'Luminosité RVB%1 couleur%2 %3 affichage%4 ',
         BBRGBLEDSTRIP_SETPIXELCOLOR: 'définir le pixel %1 couleur %2',
         BBRGBLEDSTRIP_FILL: 'remplir à partir du pixel %1 compter %2 avec la couleur %3',
         BBRGBLEDSTRIP_COLOR: 'Couleur RVB R %1 G %2 B %3',
         BBRGBLEDSTRIP_SETBRIGHTNESS: 'définir la luminosité %1',
         RGB_CHANGE: 'définir la broche RVB %1 luminosité%2 temps de changement complet de couleur%3',
         RGB_LOOP: 'définir la broche RVB %1 luminosité%2 temps de boucle de couleur complète%3',
         BBRGBLEDSTRIP_CLEAR: 'tout effacer',
         BBRGBLEDSTRIP_SHOW: 'actualiser',
    
         AHT21_CATEGORY: 'Température et humidité',
         AHT20_21: 'La température et l"humidité obtiennent %1',
  
         ANALOGVOICE_CATEGORY: 'Son',
         ANALOGVOICE_READ_VALUE: 'lire la valeur du son %1',
         CURRENT_CATEGORY: 'actuel',
         CURRENT_READ_VALUE: 'lire la valeur actuelle de',
         MPU6050_CATEGORY: 'Accélération',
         MPU6050_INIT: 'init MPU6050',
         MPU6050_REFRESH: 'MPU6050 actualiser les données',

         MPU6050_READ: 'MPU605 a lu %1',
         WIFI_CATEGORY: 'WIFI',
         WIFI_INIT: 'ssid de connexion wifi:%1 mot de passe:%2',
         WIFI_READ_IP: 'IP de lecture WiFi',
         SD_CATEGORY: 'Carte SD',
         SD_INIT: 'initialisation de la carte SD: %1 MOSI:%2 MISO:%3 SCK:%4',
         SD_REFRESH: 'SD actualiser les données',
         SD_TYPE: 'SD type',
         SD_LIST: 'liste les fichiers dans la racine SD',
         SD_VAR: 'SD %1',
         SD_JUDGE: '%1 Fichier existe?',
         SD_DELETE: 'supprimer %1',
         SD_READ: 'lire %1',
         SD_WRITE: 'écrire le fichier SD %1 Data %2 NewLine %3',
         LIGHTSENSOR_CATEGORY: "Lumière",
         LIGHTSENSOR_READ_VALUE: 'Lire la valeur de la lumière %1',
    });
    Object.assign(Blockly.ScratchMsgs.locales['ja'], {
        KS_VARIABLE_LABEL:'変数タイプ',
         KS_variables_declare:'%1 変数を宣言します。タイプ %2 名前 %3 を %4 に割り当てます',
         KS_variables_set:'%1 変数を %2 で設定',
         KS_variables_change:'%1 変数モード %2 を変更',
         KS_variables_value: '変数 %1',
         KS_variables_setString:'%1 文字列変数を %2 で設定',
         KS_global:'グローバル',
         KS_local:'ローカル',
         KS_MATH_INT: 'int',
         KS_MATH_LONG: '長い',
         KS_MATH_FLOAT: '浮動小数点',
         KS_MATH_BOOLEAN: 'ブール値',
         KS_MATH_BYTE: 'バイト',
         KS_MATH_CHAR: '文字',
         KS_MATH_STRING: '文字列',
         KS_MATH_UNSIGNED_INT: '符号なし整数',
         KS_MATH_WORD: '単語',
         KS_MATH_UNSIGNED_LONG: '符号なしロング',
         KS_MATH_UNSIGNED_CHAR: '符号なし文字',
         KS_MATH_DOUBLE: '倍精度',
         BT_SERIAL_CATEGORY: 'Bluetooth を読み取る',
         BLE_DATA: 'シリアル readStringUntil #',
         KS_TEXT_LABEL:'テキスト',
         KS_char: 'char%1',
         KS_string: 'string%1',
         KS_data: '%1',

         KS_LOGIC_LABEL:'ロジック',
         KS_judge:'%1 %2 %3',
         BUTTON_CATEGORY: 'ボタン',
         BUTTON_READ_STATE: 'ボタン %1 が押されました?',
         BUTTON_READ_VALUE: 'ボタンの状態値は? %1',

         TOUCHSWITCH_CATEGORY: 'タッチ',
         TOUCHSWITCH_STATE: 'タッチ %1 がタッチされましたか?',
         TOUCHSWITCH_READ_VALUE: 'タッチの価値は? %1?',
        
         BUZZER_CATEGORY: '音楽',
         BUZZER_TONE: '音楽 PIN#%1 頻度%2',
         BUZZER_TONE_D: '音楽 PIN#%1 頻度%2 持続時間%3',
         BUZZER_MUSIC: '音楽 PIN#%1 音楽を再生%2',
         BUZZER_NOTONE: '音楽がありません%1',
  
         BBRGBLEDSTRIP_CATEGORY: 'RGB',
       
         BBRGBLEDSTRIP_INIT: '初期化 RGB 長さ %1 ピン %2',
         BBRGBLEDSTRIP_DISPLAY: 'RGB 輝度%1 色%2 %3 ディスプレイ%4 ',
         BBRGBLEDSTRIP_SETPIXELCOLOR: 'ピクセル %1 カラー %2 を設定',
         BBRGBLEDSTRIP_FILL: 'ピクセル %1 カウント %2 から色 %3 で塗りつぶします',
         BBRGBLEDSTRIP_COLOR: 'RGB カラー R %1 G %2 B %3',
         BBRGBLEDSTRIP_SETBRIGHTNESS: '明るさを設定 %1',
         RGB_CHANGE: 'RGB ピン %1 明るさ%2 の全色変化時間%3 を設定',
         RGB_LOOP: '全色ループ%3のRGBピン%1の明るさ%2時間を設定',
         BBRGBLEDSTRIP_CLEAR: 'すべてクリア',
         BBRGBLEDSTRIP_SHOW: '更新',
    
         AHT21_CATEGORY: '温度と湿度',
         AHT20_21: '温度と湿度は %1 になります',
  
         ANALOGVOICE_CATEGORY: 'サウンド ',
         ANALOGVOICE_READ_VALUE: 'サウンド %1 の値を読み取ります',
         CURRENT_CATEGORY: '現在',
         CURRENT_READ_VALUE: '現在の の値を読み取ります',
         MPU6050_CATEGORY: '加速度',
         MPU6050_INIT: 'MPU6050 の初期化',
         MPU6050_REFRESH: 'MPU6050リフレッシュデータ',

         MPU6050_READ: 'MPU605 読み取り %1',
         WIFI_CATEGORY: 'WIFI',
         WIFI_INIT: 'WiFi 接続 ssid:%1 パスワード:%2',
         WIFI_READ_IP: 'WiFi 読み取り IP',
         SD_CATEGORY: 'SD カード',
         SD_INIT: 'SD カード CS を初期化: %1 MOSI:%2 MISO:%3 SCK:%4',
         SD_REFRESH: 'SD リフレッシュデータ',
         SD_TYPE: 'SD タイプ cs# %1',
         SD_LIST: 'SD ルート 内のファイルをリストします',
         SD_VAR: 'SD %1',
         SD_JUDGE: '%1 ファイルは存在しますか?',
         SD_DELETE: '%1 を削除',
         SD_READ: '%1 を読み取り',
         SD_WRITE: 'SD ファイル %1 データ %2 NewLine %3 を書き込みます',
         LIGHTSENSOR_CATEGORY: 'ライト',
         LIGHTSENSOR_READ_VALUE: 'ライト %1 の値を読み取ります',
    });
    Object.assign(Blockly.ScratchMsgs.locales['ko'], {
        KS_VARIABLE_LABEL:'변수 유형',
         KS_variables_declare:'%1 변수 유형 %2 이름 %3 선언 %4에 할당됨',
         KS_variables_set:'%1 변수를 %2로 설정',
         KS_variables_change:'%1 변수 모드 %2 변경',
         KS_variables_value: '변수 %1',
         KS_variables_setString:'%1 문자열 변수를 %2로 설정',
         KS_global:'글로벌',
         KS_local:'로컬',
         KS_MATH_INT: '정수',
         KS_MATH_LONG: '긴',
         KS_MATH_FLOAT: '부동',
         KS_MATH_BOOLEAN: '부울',
         KS_MATH_BYTE: '바이트',
         KS_MATH_CHAR: '문자',
         KS_MATH_STRING: '문자열',
         KS_MATH_UNSIGNED_INT: '부호 없는 정수',
         KS_MATH_WORD: '단어',
         KS_MATH_UNSIGNED_LONG: '부호 없는 롱',
         KS_MATH_UNSIGNED_CHAR: '부호 없는 문자',
         KS_MATH_DOUBLE: '더블',
         BT_SERIAL_CATEGORY: '블루투스 읽기',
         BLE_DATA: '직렬 readStringUntil #',
         KS_TEXT_LABEL:'텍스트',
         KS_char: '문자%1',
         KS_string: '문자열%1',
         KS_data: '%1',

         KS_LOGIC_LABEL:'논리',
         KS_judge:'%1 %2 %3',
         BUTTON_CATEGORY: '버튼',
         BUTTON_READ_STATE: '%1 버튼을 눌렀습니까?',
         BUTTON_READ_VALUE: '버튼의 상태 값은? %1',

         TOUCHSWITCH_CATEGORY: '터치',
         TOUCHSWITCH_STATE: '%1을(를) 터치했습니까?',
         TOUCHSWITCH_READ_VALUE: '터치 값은? %1?',
        
         BUZZER_CATEGORY: '음악',
         BUZZER_TONE: '음악 PIN#%1 주파수%2',
         BUZZER_TONE_D: '음악 PIN#%1 주파수%2 지속시간%3',
         BUZZER_MUSIC: '음악 PIN#%1 음악 재생%2',
         BUZZER_NOTONE: '음악 없음%1',
  
         BBRGBLEDSTRIP_CATEGORY: 'RGB',
       
         BBRGBLEDSTRIP_INIT: '초기화 RGB 길이 %1 핀 %2',
         BBRGBLEDSTRIP_DISPLAY: 'RGB 밝기%1 색상%2 %3 디스플레이%4 ',
         BBRGBLEDSTRIP_SETPIXELCOLOR: '픽셀 %1 색상 %2 설정',
         BBRGBLEDSTRIP_FILL: '색상 %3로 픽셀 %1 카운트 %2에서 채우기',
         BBRGBLEDSTRIP_COLOR: 'RGB 색상 R %1 G %2 B %3',
         BBRGBLEDSTRIP_SETBRIGHTNESS: '밝기 %1 설정',
         RGB_CHANGE: 'RGB 핀 %1 밝기%2 전체 색상 변경 시간%3 설정',
         RGB_LOOP: 'RGB 핀 %1 밝기%2 풀 클로어 루프 시간%3 설정',
         BBRGBLEDSTRIP_CLEAR: '모두 지우기',
         BBRGBLEDSTRIP_SHOW: '새로 고침',
    
         AHT21_CATEGORY: '온도 및 습도',
         AHT20_21: '온도와 습도가 %1이 됨',
  
         ANALOGVOICE_CATEGORY: '소리',
         ANALOGVOICE_READ_VALUE: '소리 %1의 값 읽기',
         CURRENT_CATEGORY: '현재',
         CURRENT_READ_VALUE: '현재 의 값 읽기',
         MPU6050_CATEGORY: '가속',
         MPU6050_INIT: '초기화 MPU6050',
         MPU6050_REFRESH: 'MPU6050 리프레시 데이터',

         MPU6050_READ: 'MPU605 읽기 %1',
         WIFI_CATEGORY: '와이파이',
         WIFI_INIT: 'wifi 연결 ssid:%1 비밀번호:%2',
         WIFI_READ_IP: 'WiFi 읽기 IP',
         SD_CATEGORY: 'SD 카드',
         SD_INIT: '초기화 SD 카드 CS: %1 MOSI:%2 MISO:%3 SCK:%4',
         SD_REFRESH: 'SD 리프레시 데이터',
         SD_TYPE: 'SD 유형',
         SD_LIST: 'SD 루트 %1에 있는 파일 나열',
         SD_VAR: 'SD %1',
         SD_JUDGE: '%1 파일이 존재합니까?',
         SD_DELETE: '%1 삭제',
         SD_READ: '%1 읽기',
         SD_WRITE: 'SD 파일 %1 데이터 %2 NewLine %3 쓰기',
         LIGHTSENSOR_CATEGORY: '조명',
         LIGHTSENSOR_READ_VALUE: '라이트 %1의 값 읽기',
    });
    Object.assign(Blockly.ScratchMsgs.locales['pl'], {
        KS_VARIABLE_LABEL:'Typ zmiennej',
        KS_variables_declare:'Deklaracja %1 zmiennej Typ %2 Nazwa %3 Przypisana do %4',
        KS_variables_set:'Ustaw zmienną %1 na %2',
        KS_variables_change:'Zmień tryb zmiennej %1 %2',
        KS_variables_value: 'zmienna %1',
        KS_variables_setString:'Ustaw zmienną łańcuchową %1 o %2',
        KS_global:'Globalny',
        KS_local:'Lokalny',
        KS_MATH_INT: 'int',
        KS_MATH_LONG: 'długi',
        KS_MATH_FLOAT: 'pływa',
        KS_MATH_BOOLEAN: 'wartość logiczna',
        KS_MATH_BYTE: 'bajt',
        KS_MATH_CHAR: 'znak',
        KS_MATH_STRING: 'ciąg znaków',
        KS_MATH_UNSIGNED_INT: 'bez znaku int',
        KS_MATH_WORD: 'słowo',
        KS_MATH_UNSIGNED_LONG: 'długi bez znaku',
        KS_MATH_UNSIGNED_CHAR: 'znak bez znaku',
        KS_MATH_DOUBLE: 'podwójne',
        BT_SERIAL_CATEGORY: 'Odczyt Bluetooth',
        BLE_DATA: 'Serial readStringDo #',
        KS_TEXT_LABEL:'TEKST',
        KS_char: 'znak%1',
        KS_string: 'ciąg%1',
        KS_data: '%1',

        KS_LOGIC_LABEL:'logika',
        KS_judge:'%1%2%3',
        BUTTON_CATEGORY: 'Przycisk',
        BUTTON_READ_STATE: 'Przycisk %1 został wciśnięty?',
        BUTTON_READ_VALUE: 'Wartość stanu przycisku to? %1',

        TOUCHSWITCH_CATEGORY: 'Dotyk',
        TOUCHSWITCH_STATE: 'Dotknięto %1?',
        TOUCHSWITCH_READ_VALUE: 'Wartość dotyku to? %1?',
       
        BUZZER_CATEGORY: 'Muzyka',
        BUZZER_TONE: 'Muzyka PIN#%1 częstotliwość%2',
        BUZZER_TONE_D: 'Muzyka PIN#%1 częstotliwość%2 czas trwania%3',
        BUZZER_MUSIC: 'Muzyka PIN#%1 odtwarzanie muzyki%2',
        BUZZER_NOTONE: 'brak muzyki%1',
 
        BBRGBLEDSTRIP_CATEGORY: 'RGB',
      
        BBRGBLEDSTRIP_INIT: 'początkowa długość RGB %1 pin %2',
        BBRGBLEDSTRIP_DISPLAY: 'Jasność RGB%1 kolor %2 %3 wyświetlacz %4 ',
        BBRGBLEDSTRIP_SETPIXELCOLOR: 'ustaw piksel %1 kolor %2',
        BBRGBLEDSTRIP_FILL: 'wypełnij piksel %1 liczba %2 kolorem %3',
        BBRGBLEDSTRIP_COLOR: 'Kolor RGB R %1 G %2 B %3',
        BBRGBLEDSTRIP_SETBRIGHTNESS: 'ustaw jasność %1',
        RGB_CHANGE: 'ustaw pin RGB %1 jasność%2 czas pełnej zmiany koloru%3',
        RGB_LOOP: 'ustaw pin RGB %1 jasność%2 czas pełnej pętli koloru%3',
        BBRGBLEDSTRIP_CLEAR: 'wyczyść wszystko',
        BBRGBLEDSTRIP_SHOW: 'odśwież',
   
        AHT21_CATEGORY: 'Temperatura i wilgotność',
        AHT20_21: 'Temperatura i wilgotność uzyskują %1',
 
        ANALOGVOICE_CATEGORY: 'Dźwięk',
        ANALOGVOICE_READ_VALUE: 'odczytaj wartość dźwięku %1',
        CURRENT_CATEGORY: 'aktualna',
        CURRENT_READ_VALUE: 'odczytaj wartość bieżącego',
        MPU6050_CATEGORY: 'Przyspieszenie',
        MPU6050_INIT: 'zainicjuj MPU6050',
        MPU6050_REFRESH: 'Odśwież dane MPU6050',

        MPU6050_READ: 'MPU605 odczyt %1',
        WIFI_CATEGORY: 'WIFI',
        WIFI_INIT: 'identyfikator SSID połączenia Wi-Fi:%1 hasło:%2',
        WIFI_READ_IP: 'Odczyt IP Wi-Fi',
        SD_CATEGORY: 'Karta SD',
        SD_INIT: 'początkowa karta SD CS: %1 MOSI:%2 MISO:%3 SCK:%4',
        SD_REFRESH: 'Odśwież dane SD',
        SD_TYPE: 'SD typ',
        SD_LIST: 'lista plików w katalogu głównym SD',
        SD_VAR: 'SD %1',
        SD_JUDGE: '%1 plików istnieje?',
        SD_DELETE: 'usuń %1',
        SD_READ: 'odczyt %1',
        SD_WRITE: 'zapisz plik SD %1 Dane %2 NewLine %3',
        LIGHTSENSOR_CATEGORY: 'Światło',
        LIGHTSENSOR_READ_VALUE: 'odczytaj wartość światła %1',
    });
    Object.assign(Blockly.ScratchMsgs.locales['pt'], {
        KS_VARIABLE_LABEL:'Tipo de variável',
         KS_variables_declare:'Declare %1 variável Tipo %2 Nome %3 Atribuído a %4',
         KS_variables_set:'Definir %1 variável por %2',
         KS_variables_change:'Alterar %1 modo de variável %2',
         KS_variables_value: 'variável %1',
         KS_variables_setString:'Definir variável de string %1 por %2',
         KS_global:'Global',
         KS_local:'Local',
         KS_MATH_INT: 'int',
         KS_MATH_LONG: 'longo',
         KS_MATH_FLOAT: 'flutuar',
         KS_MATH_BOOLEAN: 'booleano',
         KS_MATH_BYTE: 'byte',
         KS_MATH_CHAR: 'char',
         KS_MATH_STRING: 'string',
         KS_MATH_UNSIGNED_INT: 'int unsigned',
         KS_MATH_WORD: 'palavra',
         KS_MATH_UNSIGNED_LONG: 'não assinado longo',
         KS_MATH_UNSIGNED_CHAR: 'caractere não assinado',
         KS_MATH_DOUBLE: 'duplo',
         BT_SERIAL_CATEGORY: 'Ler Bluetooth',
         BLE_DATA: 'Serial readStringUntil #',
         KS_TEXT_LABEL:'TEXT',
         KS_char: 'char%1',
         KS_string: 'string%1',
         KS_data: '%1',

         KS_LOGIC_LABEL:'lógica',
         KS_judge:'%1 %2 %3',
         BUTTON_CATEGORY: 'Botão',
         BUTTON_READ_STATE: 'Botão %1 foi pressionado?',
         BUTTON_READ_VALUE: 'O valor do estado do botão é? %1',

         TOUCHSWITCH_CATEGORY: 'Toque',
         TOUCHSWITCH_STATE: 'Toque %1 foi tocado?',
         TOUCHSWITCH_READ_VALUE: 'O valor do toque é? %1?',
        
         BUZZER_CATEGORY: 'Música',
         BUZZER_TONE: 'PIN da música#%1 frequência%2',
         BUZZER_TONE_D: 'PIN da música#%1 frequência%2 duração%3',
         BUZZER_MUSIC: 'Música PIN#%1 toca música%2',
         BUZZER_NOTONE: 'sem música%1',
  
         BBRGBLEDSTRIP_CATEGORY: 'RGB',
       
         BBRGBLEDSTRIP_INIT: 'comprimento RGB inicial %1 pino %2',
         BBRGBLEDSTRIP_DISPLAY: 'Brilho RGB%1 clor%2 %3 tela %4 ',
         BBRGBLEDSTRIP_SETPIXELCOLOR: 'definir pixel %1 cor %2',
         BBRGBLEDSTRIP_FILL: 'preencher do pixel %1 contagem %2 com a cor %3',
         BBRGBLEDSTRIP_COLOR: 'Cor RGB R %1 G %2 B %3',
         BBRGBLEDSTRIP_SETBRIGHTNESS: 'definir brilho %1',
         RGB_CHANGE: 'definir o pino RGB %1 brilho%2 tempo de mudança de cor total%3',
         RGB_LOOP: 'definir o pino RGB %1 brilho%2 tempo do loop de clour completo%3',
         BBRGBLEDSTRIP_CLEAR: 'limpar tudo',
         BBRGBLEDSTRIP_SHOW: 'atualizar',
    
         AHT21_CATEGORY: 'Temperatura e umidade',
         AHT20_21: 'Temperatura e umidade atingem %1',
  
         ANALOGVOICE_CATEGORY: 'Som',
         ANALOGVOICE_READ_VALUE: 'ler o valor do som %1',
         CURRENT_CATEGORY: 'atual',
         CURRENT_READ_VALUE: 'ler o valor do atual',
         MPU6050_CATEGORY: 'Aceleração',
         MPU6050_INIT: 'iniciar MPU6050',
         MPU6050_REFRESH: 'Dados de atualização do MPU6050',

         MPU6050_READ: 'MPU605 leu %1',
         WIFI_CATEGORY: 'WIFI',
         WIFI_INIT: 'wifi connect ssid:%1 senha:%2',
         WIFI_READ_IP: 'WiFi read ip',
         SD_CATEGORY: 'cartão SD',
         SD_INIT: 'iniciar cartão SD CS: %1 MOSI:%2 MISO:%3 SCK:%4',
         SD_REFRESH: 'ODados de atualização do SD',
         SD_TYPE: 'SD tipo',
         SD_LIST: 'listar arquivos em SD root',
         SD_VAR: 'SD %1',
         SD_JUDGE: 'Arquivo %1 existe?',
         SD_DELETE: 'excluir %1',
         SD_READ: 'ler %1',
         SD_WRITE: 'escrever arquivo SD %1 Data %2 NewLine %3',
         LIGHTSENSOR_CATEGORY: 'Luz',
         LIGHTSENSOR_READ_VALUE: 'leia o valor da luz %1',
    });
    Object.assign(Blockly.ScratchMsgs.locales['ru'], {
        KS_VARIABLE_LABEL: 'Тип переменной',
         KS_variables_declare:'Объявить переменную %1 Тип %2 Имя %3 Назначено %4',
         KS_variables_set:'Установить переменную %1 на %2',
         KS_variables_change:'Изменить режим переменной %1 %2',
         KS_variables_value: 'переменная %1',
         KS_variables_setString:'Установить %1 строковую переменную на %2',
         KS_global: 'Глобальный',
         KS_local: 'Местный',
         KS_MATH_INT: 'целое',
         KS_MATH_LONG: 'длинный',
         KS_MATH_FLOAT: 'плавающая',
         KS_MATH_BOOLEAN: 'логическое значение',
         KS_MATH_BYTE: 'байт',
         KS_MATH_CHAR: 'символ',
         KS_MATH_STRING: 'строка',
         KS_MATH_UNSIGNED_INT: 'целое число без знака',
         KS_MATH_WORD: 'слово',
         KS_MATH_UNSIGNED_LONG: 'длинное без знака',
         KS_MATH_UNSIGNED_CHAR: 'беззнаковый символ',
         KS_MATH_DOUBLE: 'двойной',
         BT_SERIAL_CATEGORY: 'Чтение Bluetooth',
         BLE_DATA: 'Серийный номер readStringUntil #',
         KS_TEXT_LABEL:'ТЕКСТ',
         KS_char: 'символ%1',
         KS_string: 'строка%1',
         KS_data: '%1',

         KS_LOGIC_LABEL: 'логика',
         KS_judge:'%1 %2 %3',
         BUTTON_CATEGORY: "Кнопка",
         BUTTON_READ_STATE: 'Кнопка %1 была нажата?',
         BUTTON_READ_VALUE: 'Значение состояния кнопки? %1',

         TOUCHSWITCH_CATEGORY: "Сенсорный",
         TOUCHSWITCH_STATE: 'Вы касались %1?',
         TOUCHSWITCH_READ_VALUE: 'Ценность прикосновения? %1?',
        
         BUZZER_CATEGORY: "Музыка",
         BUZZER_TONE: 'Музыкальный PIN-код №%1, частота%2',
         BUZZER_TONE_D: 'Музыкальный PIN-код №%1, частота%2, продолжительность%3',
         BUZZER_MUSIC: 'Музыкальный PIN-код #%1 воспроизвести музыку%2',
         BUZZER_NOTONE: 'нет музыки%1',
  
         BBRGBLEDSTRIP_CATEGORY: 'RGB',
       
         BBRGBLEDSTRIP_INIT: 'инициальная длина RGB %1 вывод %2',
         BBRGBLEDSTRIP_DISPLAY: 'Яркость RGB%1 затемнение%2 %3 дисплей%4 ',
         BBRGBLEDSTRIP_SETPIXELCOLOR: 'установить для пикселя %1 цвет %2',
         BBRGBLEDSTRIP_FILL: 'залить от пикселя %1 отсчета %2 цветом %3',
         BBRGBLEDSTRIP_COLOR: 'Цвет RGB R %1 G %2 B %3',
         BBRGBLEDSTRIP_SETBRIGHTNESS: 'установить яркость%1',
         RGB_CHANGE: 'установить контакт RGB %1, яркость%2, время полного изменения цвета%3',
         RGB_LOOP: 'установить пин RGB %1, яркость%2, время полного цикла стирания%3',
         BBRGBLEDSTRIP_CLEAR: 'очистить все',
         BBRGBLEDSTRIP_SHOW: 'обновить',
    
         AHT21_CATEGORY: 'Температура и влажность',
         AHT20_21: 'Температура и влажность получают %1',
  
         ANALOGVOICE_CATEGORY: "Звук",
         ANALOGVOICE_READ_VALUE: 'прочитать значение звука %1',
         CURRENT_CATEGORY: 'текущая',
         CURRENT_READ_VALUE: 'прочитать значение текущего',
         MPU6050_CATEGORY: 'Ускорение',
         MPU6050_INIT: 'инициализировать MPU6050',
         MPU6050_REFRESH: 'обновить данные MPU6050',

         MPU6050_READ: 'MPU605 прочитал %1',
         WIFI_CATEGORY: "WI-FI",
         WIFI_INIT: 'ssid для подключения к Wi-Fi:%1, пароль:%2',
         WIFI_READ_IP: 'IP-адрес чтения WiFi',
         SD_CATEGORY: 'SD-карта',
         SD_INIT: 'инициализировать SD-карту CS: %1 MOSI:%2 MISO:%3 SCK:%4',
         SD_REFRESH: 'обновить данные SD',
         SD_TYPE: 'Тип SD',
         SD_LIST: 'список файлов в корневом каталоге SD',
         SD_VAR: 'SD %1',
         SD_JUDGE: '%1 Файл существует?',
         SD_DELETE: 'удалить %1',
         SD_READ: 'прочитано %1',
         SD_WRITE: 'записать SD-файл %1 Data %2 NewLine %3',
         LIGHTSENSOR_CATEGORY: 'Свет',
         LIGHTSENSOR_READ_VALUE: 'прочитать значение света %1',
    });
    Object.assign(Blockly.ScratchMsgs.locales['zh-tw'], {
        KS_VARIABLE_LABEL:'變量類型',
        KS_variables_declare:'聲明 %1 數字變量 類型 %2 名稱 %3 賦值為 %4',
        KS_variables_declare2:'聲明 %1 字符串變量 類型 %2 名稱 %3 賦值為 %4',
        KS_variables_set:'設置 %1 變量 為 %2',
        KS_variables_change:'設置 %1 變量 模式 %2',
        KS_variables_value: '變量 %1',
        KS_variables_setString:'設置 %1 字符串變量 為 %2',
        KS_global:'全局',
        KS_local:'局部',
        KS_MATH_INT: '整數',
        KS_MATH_LONG: '長整數',
        KS_MATH_FLOAT: '小數',
        KS_MATH_BOOLEAN: '布爾',
        KS_MATH_BYTE: '字節',
        KS_MATH_CHAR: '字符',
        KS_MATH_STRING: '字符串',
        KS_MATH_UNSIGNED_INT: '無符號整數',
        KS_MATH_WORD: '字',
        KS_MATH_UNSIGNED_LONG: '無符號長整數',
        KS_MATH_UNSIGNED_CHAR: '無符號字符',
        KS_MATH_DOUBLE: '雙精度浮點數',
        KS_TEXT_LABEL:'文本',
        KS_char: '\'%1\'',
        KS_string: '\"%1\"',
        KS_data: '%1',
        KS_LOGIC_LABEL:'邏輯',
        KS_judge:'%1 %2 %3',

        BUTTON_CATEGORY: '按鍵',
        BUTTON_READ_STATE: '按鍵%1 被按下?',
        BUTTON_READ_VALUE: '按鍵%1的狀態值',

        TOUCHSWITCH_CATEGORY: '觸摸',
        TOUCHSWITCH_READ_VALUE: '觸摸%1的值',
        TOUCHSWITCH_STATE: '%1檢測到觸摸?',

        BUZZER_CATEGORY: '音樂',
        BUZZER_TONE: '播放聲音 引腳%1 頻率%2',
        BUZZER_TONE_D: '播放聲音 引腳%1 頻率%2 節拍%3',
        BUZZER_MUSIC: '音樂 引腳%1 播放音樂%2',
        BUZZER_NOTONE: '結束聲音 引腳%1',
     
        BBRGBLEDSTRIP_CATEGORY: 'RGB',
     
        BBRGBLEDSTRIP_INIT: '初始化RGB 燈顆數 %1 引腳 %2',
        BBRGBLEDSTRIP_DISPLAY: 'RGB亮度%1  顏色%2 %3 顯示%4 ',
        
        BBRGBLEDSTRIP_SETPIXELCOLOR: '設置像素 %1 顏色 %2',
        BBRGBLEDSTRIP_FILL: '從像素 %1 開始 到像素 %2 顏色 %3',
        BBRGBLEDSTRIP_COLOR: 'RGB 顏色 R %1 G %2 B %3',
        BBRGBLEDSTRIP_SETBRIGHTNESS: '設置亮度 %1',
        RGB_CHANGE: '設置RGB引腳%1 亮度%2  七彩變化時間%3',
        RGB_LOOP: '設置RGB引腳%1 亮度%2  七彩循環時間%3',
        BBRGBLEDSTRIP_CLEAR: '清除所有',
        BBRGBLEDSTRIP_SHOW: '刷新',   
     
        AHT21_CATEGORY: '溫濕度',
     
        AHT20_21: '溫濕度獲取 %1',
     
        ANALOGVOICE_CATEGORY: '聲音',
        ANALOGVOICE_READ_VALUE: '讀取接口 %1 聲音強度',
        CURRENT_CATEGORY: '電流',
        CURRENT_READ_VALUE: '讀取接口 電流',
        MPU6050_CATEGORY: '加速度',
        MPU6050_INIT: '初始化 加速度',
        MPU6050_REFRESH: '加速度 刷新數據',
        MPU6050_READ: '讀取加速度 %1',
        WIFI_CATEGORY: 'WIFI',
        WIFI_INIT: '連接WiFi 名稱%1 密碼%2',
        WIFI_READ_IP: 'WiFi 讀取IP',
        SD_CATEGORY: 'SD卡',
        SD_INIT: '初始化 SD卡  CS:%1 MOSI:%2 MISO:%3 SCK:%4',
        SD_REFRESH: '刷新數據 SD',
        SD_TYPE: 'SD類型',
        SD_LIST: '列出SD根目錄文件',
        SD_VAR: '讀取SD%1',
        SD_JUDGE: '%1文件存在?',
        SD_DELETE: '刪除%1',
        SD_READ: '讀取%1',
        SD_WRITE: '寫入SD 文件%1 數據%2 換行%3',
        LIGHTSENSOR_CATEGORY: '光線',
        LIGHTSENSOR_READ_VALUE: '讀取接口%1光線強度',
    });
    Object.assign(Blockly.ScratchMsgs.locales['zh-cn'], {     
        KS_VARIABLE_LABEL:'变量类型',
        KS_variables_declare:'声明 %1 数字变量 类型 %2 名称 %3 赋值为 %4',
        KS_variables_declare2:'声明 %1 字符串变量 类型 %2 名称 %3 赋值为 %4',
        KS_variables_set:'设置 %1 变量 为 %2',
        KS_variables_change:'设置 %1 变量 模式 %2',
        KS_variables_value: '变量 %1',
        KS_variables_setString:'设置 %1 字符串变量 为 %2',
        KS_global:'全局',
        KS_local:'局部',
        KS_MATH_INT: '整数',
        KS_MATH_LONG: '长整数',
        KS_MATH_FLOAT: '小数',
        KS_MATH_BOOLEAN: '布尔',
        KS_MATH_BYTE: '字节',
        KS_MATH_CHAR: '字符',
        KS_MATH_STRING: '字符串',
        KS_MATH_UNSIGNED_INT: '无符号整数',
        KS_MATH_WORD: '字',
        KS_MATH_UNSIGNED_LONG: '无符号长整数',
        KS_MATH_UNSIGNED_CHAR: '无符号字符',
        KS_MATH_DOUBLE: '双精度浮点数',
        KS_TEXT_LABEL:'文本',
        KS_char: '\'%1\'',
        KS_string: '\"%1\"',
        KS_data: '%1',
        KS_LOGIC_LABEL:'逻辑',
        KS_judge:'%1 %2 %3',

        BUTTON_CATEGORY: '按键',
        BUTTON_READ_STATE: '按键%1 被按下?',
        BUTTON_READ_VALUE: '按键%1的状态值',

        TOUCHSWITCH_CATEGORY: '触摸',
        TOUCHSWITCH_READ_VALUE: '触摸%1的值',
        TOUCHSWITCH_STATE: '%1检测到触摸?',

        BUZZER_CATEGORY: '音乐',
        BUZZER_TONE: '播放声音 引脚%1 频率%2',
        BUZZER_TONE_D: '播放声音 引脚%1 频率%2 节拍%3',
        BUZZER_MUSIC: '音乐 引脚%1 播放音乐%2',
        BUZZER_NOTONE: '结束声音 引脚%1',
     
        BBRGBLEDSTRIP_CATEGORY: 'RGB',
     
        BBRGBLEDSTRIP_INIT: '初始化RGB 灯颗数 %1 引脚 %2',
        BBRGBLEDSTRIP_DISPLAY: 'RGB亮度%1  颜色%2 %3 显示%4 ',
        
        BBRGBLEDSTRIP_SETPIXELCOLOR: '设置像素 %1 颜色 %2',
        BBRGBLEDSTRIP_FILL: '从像素 %1 开始 到像素 %2 颜色 %3',
        BBRGBLEDSTRIP_COLOR: 'RGB 颜色 R %1 G %2 B %3',
        BBRGBLEDSTRIP_SETBRIGHTNESS: '设置亮度 %1',
        RGB_CHANGE: '设置RGB引脚%1 亮度%2  七彩变化时间%3',
        RGB_LOOP: '设置RGB引脚%1 亮度%2  七彩循环时间%3',
        BBRGBLEDSTRIP_CLEAR: '清除所有',
        BBRGBLEDSTRIP_SHOW: '刷新',   
     
        AHT21_CATEGORY: '温湿度',
     
        AHT20_21: '温湿度获取 %1',
     
        ANALOGVOICE_CATEGORY: '声音',
        ANALOGVOICE_READ_VALUE: '读取接口 %1 声音强度',
        CURRENT_CATEGORY: '电流',
        CURRENT_READ_VALUE: '读取接口 电流',
        MPU6050_CATEGORY: '加速度',
        MPU6050_INIT: '初始化 加速度',
        MPU6050_REFRESH: '加速度 刷新数据',
        MPU6050_READ: '读取加速度 %1',

        WIFI_CATEGORY: 'WIFI',
        WIFI_INIT: '连接WiFi 名称%1 密码%2',
        WIFI_READ_IP: 'WiFi 读取IP',
        
        SD_CATEGORY: 'SD卡',
        SD_INIT: '初始化 SD卡  CS:%1 MOSI:%2 MISO:%3 SCK:%4',
        SD_REFRESH: 'SD 刷新数据',
        SD_TYPE: 'SD类型',
        SD_LIST: '列出SD根目录文件',
        SD_VAR: '读取SD%1',
        SD_JUDGE: '%1文件存在?',
        SD_DELETE: '删除%1',
        SD_READ: '读取%1',
        SD_WRITE: '写入SD 文件%1 数据%2 换行%3',
        LIGHTSENSOR_CATEGORY: '光线',
        LIGHTSENSOR_READ_VALUE: '读取接口%1光线强度',

    });
    return Blockly;
}

exports = addMsg;
