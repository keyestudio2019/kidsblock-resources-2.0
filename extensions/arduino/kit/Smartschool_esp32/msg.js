/* eslint-disable func-style */
/* eslint-disable max-len */
/* eslint-disable require-jsdoc */
function addMsg (Blockly) {
    Object.assign(Blockly.ScratchMsgs.locales.en, {
        KS_VARIABLE_LABEL:'Variable Type',
        KS_variables_declare:'Declare %1 variable Type %2 Name %3 Assigned to %4',
        KS_variables_set:'Set %1 variable by %2',
        KS_variables_change:'Change %1 variable mode %2',
        KS_variables_value: 'variable %1',
        KS_variables_setString:'Set %1 String variable by %2',
        KS_global:'Global',
        KS_local:'Local',
        KS_MATH_INT: 'int',
        KS_MATH_LONG: 'long',
        KS_MATH_FLOAT: 'float',
        KS_MATH_BOOLEAN: 'boolean',
        KS_MATH_BYTE: 'byte',
        KS_MATH_CHAR: 'char',
        KS_MATH_STRING: 'string',
        KS_MATH_UNSIGNED_INT: 'unsigned int',
        KS_MATH_WORD: 'word',
        KS_MATH_UNSIGNED_LONG: 'unsigned long',
        KS_MATH_UNSIGNED_CHAR: 'unsigned char',
        KS_MATH_DOUBLE: 'double',

        KS_TEXT_LABEL:'TEXT',
        KS_char: 'char%1',
        KS_string: 'string%1',
        KS_data: '%1',

        KS_LOGIC_LABEL:'logic',
        KS_judge:'%1 %2 %3',

        LED_CATEGORY: 'Lamp',
        LED_SET_LED_STATE: 'lamp interface %1 output %2',
        LED_ANALOG: 'Lamp %1 channel %2 analog output %3',
        BUZZER_CATEGORY: 'Music',
        BUZZER_TONE_D: 'Play tone pin %1 frequency %2 beat %3',
        BUZZER_MUSIC: 'Music pin %1 play music %2',
        BUZZER_NOTONE: 'Stop tone pin %1',

        BUTTON_CATEGORY: 'Button',
        BUTTON_READ_STATE: 'Is button on interface %1 pressed?',
        BUTTON_READ_VALUE: 'State value of button on interface %1',
        PIR_CATEGORY: 'PIR',
        PIR_READ_VALUE: 'Read interface %1 PIR sensor',
        INFRARED_CATEGORY: 'IR OA',
        INFRARED_READ_VALUE: 'Read interface %1 obstacle avoidance sensor',
        LIGHTSENSOR_CATEGORY: 'Light',
        LIGHTSENSOR_READ_VALUE: 'Read interface %1 light value',
        AHT20_CATEGORY: 'T&H',
        AHT20_READ: 'Read AHT20 temperature/humidity %1',
        ENS160_CATEGORY: 'AQI',
        ENS160_READ: 'Read air quality value of %1',
        KS_SERVO_CATEGORY: 'Servo',
        KS_SERVO_ANGLE: 'Servo pin %1 channel %2 angle %3 delay(ms) %4',
        KS_SERVO_READ: 'Servo pin %1 read degrees',
        MOTOR130_CATEGORY: 'Motor',
        MOTOR130: 'Motor INA#%1 level %2 INB#%3 analog output value %4',

        BBRGBLEDSTRIP_CATEGORY: 'RGB',
        BBRGBLEDSTRIP_INIT: 'Init RGB count %1 pin %2',
        BBRGBLEDSTRIP_SETPIXELCOLOR: 'Set pixel %1 color %2',
        BBRGBLEDSTRIP_FILL: 'fill from pixel %1 count %2 with color %3',
        BBRGBLEDSTRIP_COLOR: 'RGB color R %1 G %2 B %3',
        BBRGBLEDSTRIP_SETBRIGHTNESS: 'Set brightness %1',
        BBRGBLEDSTRIP_CLEAR: 'Clear all',
        BBRGBLEDSTRIP_SHOW: 'Refresh',
        RC522_CATEGORY: 'RFID',
        RC522_INIT: 'Init RFID',
        RC522_READ: 'Read card value',
        OLED_CATEGORY: 'OLED',
        OLED_INIT: 'Init OLED screen',
        OLED_SETTEXT: 'Set font size %1',
        OLED_SETCURSOR: 'Set cursor x: %1 y: %2',
        OLED_PRINT: 'Print %1 %2',
        OLED_EOL_WARP: 'Wrap',
        OLED_EOL_NOWARP: 'No wrap',
        OLED_IMAGE: 'OLED display image %1',
        OLED_CLEAR: 'Clear OLED',
        OLED_REFRESH: 'Refresh OLED',
        WIFI_CATEGORY: 'WIFI',
        WIFI_INIT: 'Connect WiFi SSID %1 password %2',
        // WIFI_READ: 'WiFi read data',
        WIFI_READ_IP: 'WiFi read IP',
        WIFI_CLIENT_INIT: 'WiFi init client',
        WIFI_CLIENT_CONNECTED: 'WiFi client not connected',
        WIFI_READ_DATA: 'WiFi read data',
        WIFI_SEND_DATA: 'WiFi send data'
   
    });
    Object.assign(Blockly.ScratchMsgs.locales['de'], {
        KS_VARIABLE_LABEL:'Variablentyp',
        KS_variables_declare:'Deklarieren Sie %1 Variablentyp %2 Name %3 Zugewiesen an %4',
        KS_variables_set:'Variable %1 um %2 setzen',
        KS_variables_change:'Variablenmodus %1 %2 ändern',
        KS_variables_value: 'Variable %1',
        KS_variables_setString:'Setze %1 String-Variable um %2',
        KS_global:'Global',
        KS_local:'Lokal',
        KS_MATH_INT: 'int',
        KS_MATH_LONG: 'lang',
        KS_MATH_FLOAT: 'float',
        KS_MATH_BOOLEAN: 'boolean',
        KS_MATH_BYTE: 'Byte',
        KS_MATH_CHAR: 'char',
        KS_MATH_STRING: 'Zeichenfolge',
        KS_MATH_UNSIGNED_INT: 'unsigned int',
        KS_MATH_WORD: 'Wort',
        KS_MATH_UNSIGNED_LONG: 'unsigned long',
        KS_MATH_UNSIGNED_CHAR: 'unsigned char',
        KS_MATH_DOUBLE: 'double',

        KS_TEXT_LABEL:'TEXT',
        KS_char: 'char%1',
        KS_string: 'string%1',
        KS_data: '%1',

        KS_LOGIC_LABEL:'Logik',
        KS_judge:'%1 %2 %3',
        LED_CATEGORY: 'Lampe',
        LED_SET_LED_STATE: 'Lampenschnittstelle %1 Ausgang %2',
        LED_ANALOG: 'Lampe %1 Kanal %2 analoger Ausgang %3',
        BUZZER_CATEGORY: 'Musik',
        BUZZER_TONE_D: 'Ton abspielen Pin %1 Frequenz %2 Takt %3',
        BUZZER_MUSIC: 'Musik Pin %1 Musik abspielen %2',
        BUZZER_NOTONE: 'Ton beenden Pin %1',

        BUTTON_CATEGORY: 'Taste',
        BUTTON_READ_STATE: 'Ist die Taste an Schnittstelle %1 gedrückt?',
        BUTTON_READ_VALUE: 'Statuswert der Taste an Schnittstelle %1',
        PIR_CATEGORY: 'PIR',
        PIR_READ_VALUE: 'Schnittstelle %1 PIR-Sensor lesen',
        INFRARED_CATEGORY: 'IR Hindernisvermeidung',
        INFRARED_READ_VALUE: 'Schnittstelle %1 Hindernisvermeidungssensor lesen',
        LIGHTSENSOR_CATEGORY: 'Licht',
        LIGHTSENSOR_READ_VALUE: 'Schnittstelle %1 Lichtwert lesen',
        AHT20_CATEGORY: 'T&H',
        AHT20_READ: 'AHT20 Temperatur/Luftfeuchtigkeit lesen %1',
        ENS160_CATEGORY: 'Luftqualität',
        ENS160_READ: 'Luftqualitätswert von %1 lesen',
        KS_SERVO_CATEGORY: 'Servo',
        KS_SERVO_ANGLE: 'Servo Pin %1 Kanal %2 Winkel %3 Verzögerung(ms) %4',
        KS_SERVO_READ: 'Servo Pin %1 Grad lesen',
        MOTOR130_CATEGORY: 'Motor',
        MOTOR130: 'Motor INA#%1 Pegel %2 INB#%3 Analogausgabewert %4',

        BBRGBLEDSTRIP_CATEGORY: 'RGB',
        BBRGBLEDSTRIP_INIT: 'RGB Anzahl %1 Pin %2 initialisieren',
        BBRGBLEDSTRIP_SETPIXELCOLOR: 'Pixel %1 Farbe %2 setzen',
        BBRGBLEDSTRIP_FILL: 'Fülle ab Pixel %1 bis Pixel %2 mit Farbe %3',
        BBRGBLEDSTRIP_COLOR: 'RGB-Farbe R %1 G %2 B %3',
        BBRGBLEDSTRIP_SETBRIGHTNESS: 'Helligkeit %1 setzen',
        BBRGBLEDSTRIP_CLEAR: 'Alle löschen',
        BBRGBLEDSTRIP_SHOW: 'Aktualisieren',
        RC522_CATEGORY: 'RFID',
        RC522_INIT: 'RFID initialisieren',
        RC522_READ: 'Kartenwert lesen',
        OLED_CATEGORY: 'OLED',
        OLED_INIT: 'OLED-Bildschirm initialisieren',
        OLED_SETTEXT: 'Schriftgröße %1 setzen',
        OLED_SETCURSOR: 'Cursor setzen x: %1 y: %2',
        OLED_PRINT: 'Drucken %1 %2',
        OLED_EOL_WARP: 'Zeilenumbruch',
        OLED_EOL_NOWARP: 'Kein Umbruch',
        OLED_IMAGE: 'OLED Bild anzeigen %1',
        OLED_CLEAR: 'OLED löschen',
        OLED_REFRESH: 'OLED aktualisieren',
        WIFI_CATEGORY: 'WLAN',
        WIFI_INIT: 'Mit WLAN verbinden SSID %1 Passwort %2',
        // WIFI_READ: 'WLAN Daten lesen',
        WIFI_READ_IP: 'WLAN IP lesen',
        WIFI_CLIENT_INIT: 'WLAN-Client initialisieren',
        WIFI_CLIENT_CONNECTED: 'WLAN-Client nicht verbunden',
        WIFI_READ_DATA: 'WLAN Daten lesen',
        WIFI_SEND_DATA: 'WLAN Daten senden'
    });
    Object.assign(Blockly.ScratchMsgs.locales['es'], {
        KS_VARIABLE_LABEL:'Tipo de variable',
        KS_variables_declare:'Declarar %1 variable Tipo %2 Nombre %3 Asignado a %4',
        KS_variables_set:'Establecer %1 variable por %2',
        KS_variables_change:'Cambiar %1 modo variable %2',
        KS_variables_value: 'variable %1',
        KS_variables_setString:'Establecer %1 variable de cadena por %2',
        KS_global:'Global',
        KS_local:'Local',
        KS_MATH_INT: 'int',
        KS_MATH_LONG: 'largo',
        KS_MATH_FLOAT: 'flotante',
        KS_MATH_BOOLEAN: 'booleano',
        KS_MATH_BYTE: 'byte',
        KS_MATH_CHAR: 'carácter',
        KS_MATH_STRING: 'cadena',
        KS_MATH_UNSIGNED_INT: 'int sin firmar',
        KS_MATH_WORD: 'palabra',
        KS_MATH_UNSIGNED_LONG: 'largo sin firmar',
        KS_MATH_UNSIGNED_CHAR: 'caracter sin firmar',
        KS_MATH_DOUBLE: 'doble',

        KS_TEXT_LABEL:'TEXTO',
        KS_char: 'char%1',
        KS_string: 'cadena%1',
        KS_data: '%1',

        KS_LOGIC_LABEL:'lógica',
        KS_judge:'%1 %2 %3',
        LED_CATEGORY: 'Lámpara',
        LED_SET_LED_STATE: 'Interfaz de lámpara %1 salida %2',
        LED_ANALOG: 'Lámpara %1 canal %2 salida analógica %3',
        BUZZER_CATEGORY: 'Música',
        BUZZER_TONE_D: 'Reproducir tono pin %1 frecuencia %2 pulso %3',
        BUZZER_MUSIC: 'Música pin %1 reproducir música %2',
        BUZZER_NOTONE: 'Detener tono pin %1',

        BUTTON_CATEGORY: 'Botón',
        BUTTON_READ_STATE: '¿Está presionado el botón en la interfaz %1?',
        BUTTON_READ_VALUE: 'Valor de estado del botón en la interfaz %1',
        PIR_CATEGORY: 'PIR',
        PIR_READ_VALUE: 'Leer interfaz %1 sensor PIR',
        INFRARED_CATEGORY: 'IR evitación de obstáculos',
        INFRARED_READ_VALUE: 'Leer interfaz %1 sensor de evitación de obstáculos',
        LIGHTSENSOR_CATEGORY: 'Luz',
        LIGHTSENSOR_READ_VALUE: 'Leer valor de luz de la interfaz %1',
        AHT20_CATEGORY: 'T&H',
        AHT20_READ: 'Leer AHT20 temperatura/humedad %1',
        ENS160_CATEGORY: 'Calidad del aire',
        ENS160_READ: 'Leer valor de calidad del aire de %1',
        KS_SERVO_CATEGORY: 'Servo',
        KS_SERVO_ANGLE: 'Servo pin %1 canal %2 ángulo %3 retardo(ms) %4',
        KS_SERVO_READ: 'Servo pin %1 leer grados',
        MOTOR130_CATEGORY: 'Motor',
        MOTOR130: 'Motor INA#%1 nivel %2 INB#%3 valor de salida analógica %4',

        BBRGBLEDSTRIP_CATEGORY: 'RGB',
        BBRGBLEDSTRIP_INIT: 'Iniciar cantidad RGB %1 pin %2',
        BBRGBLEDSTRIP_SETPIXELCOLOR: 'Establecer píxel %1 color %2',
        BBRGBLEDSTRIP_FILL: 'rellenar desde el píxel %1 contar %2 con el color %3',
        BBRGBLEDSTRIP_COLOR: 'Color RGB R %1 G %2 B %3',
        BBRGBLEDSTRIP_SETBRIGHTNESS: 'Establecer brillo %1',
        BBRGBLEDSTRIP_CLEAR: 'Borrar todo',
        BBRGBLEDSTRIP_SHOW: 'Actualizar',
        RC522_CATEGORY: 'RFID',
        RC522_INIT: 'Iniciar RFID',
        RC522_READ: 'Leer valor de tarjeta',
        OLED_CATEGORY: 'OLED',
        OLED_INIT: 'Iniciar pantalla OLED',
        OLED_SETTEXT: 'Establecer tamaño de fuente %1',
        OLED_SETCURSOR: 'Establecer cursor x: %1 y: %2',
        OLED_PRINT: 'Imprimir %1 %2',
        OLED_EOL_WARP: 'Ajuste de línea',
        OLED_EOL_NOWARP: 'Sin ajuste',
        OLED_IMAGE: 'OLED mostrar imagen %1',
        OLED_CLEAR: 'Limpiar OLED',
        OLED_REFRESH: 'Actualizar OLED',
        WIFI_CATEGORY: 'WIFI',
        WIFI_INIT: 'Conectar WiFi SSID %1 contraseña %2',
        // WIFI_READ: 'Leer datos de WiFi',
        WIFI_READ_IP: 'Leer IP de WiFi',
        WIFI_CLIENT_INIT: 'Iniciar cliente WiFi',
        WIFI_CLIENT_CONNECTED: 'Cliente WiFi no conectado',
        WIFI_READ_DATA: 'Leer datos de WiFi',
        WIFI_SEND_DATA: 'Enviar datos por WiFi'
    });
    Object.assign(Blockly.ScratchMsgs.locales['fr'], {
        KS_VARIABLE_LABEL:'Type de variable',
         KS_variables_declare:'Déclarer %1 variable Type %2 Nom %3 Attribué à %4',
         KS_variables_set: 'Définir la variable %1 par %2',
         KS_variables_change:'Changer %1 mode variable %2',
         KS_variables_value: 'variable %1',
         KS_variables_setString: 'Définir la variable chaîne %1 par %2',
         KS_global:'Global',
         KS_local:'Local',
         KS_MATH_INT: 'entier',
         KS_MATH_LONG: 'long',
         KS_MATH_FLOAT: 'flottant',
         KS_MATH_BOOLEAN: 'booléen',
         KS_MATH_BYTE: 'octet',
         KS_MATH_CHAR: 'car',
         KS_MATH_STRING: 'chaîne',
         KS_MATH_UNSIGNED_INT: 'entier non signé',
         KS_MATH_WORD: 'mot',
         KS_MATH_UNSIGNED_LONG: 'long non signé',
         KS_MATH_UNSIGNED_CHAR: 'caractère non signé',
         KS_MATH_DOUBLE: 'doubler',

         KS_TEXT_LABEL:'TEXTE',
         KS_char: 'car%1',
         KS_string: 'chaîne%1',
         KS_data: '%1',

         KS_LOGIC_LABEL:'logique',
         KS_judge:'%1 %2 %3',
         LED_CATEGORY: 'Lampe',
         LED_SET_LED_STATE: 'Interface de lampe %1 sortie %2',
         LED_ANALOG: 'Lampe %1 canal %2 sortie analogique %3',
         BUZZER_CATEGORY: 'Musique',
         BUZZER_TONE_D: 'Lire un ton broche %1 fréquence %2 temps %3',
         BUZZER_MUSIC: 'Musique broche %1 lire musique %2',
         BUZZER_NOTONE: 'Arrêter le ton broche %1',
 
         BUTTON_CATEGORY: 'Bouton',
         BUTTON_READ_STATE: 'Le bouton sur l’interface %1 est-il appuyé ?',
         BUTTON_READ_VALUE: 'Valeur d’état du bouton sur l’interface %1',
         PIR_CATEGORY: 'PIR',
         PIR_READ_VALUE: 'Lire interface %1 capteur PIR',
         INFRARED_CATEGORY: 'IR évitement d’obstacles',
         INFRARED_READ_VALUE: 'Lire interface %1 capteur d’évitement d’obstacles',
         LIGHTSENSOR_CATEGORY: 'Lumière',
         LIGHTSENSOR_READ_VALUE: 'Lire valeur de lumière interface %1',
         AHT20_CATEGORY: 'T&H',
         AHT20_READ: 'Lire AHT20 température/humidité %1',
         ENS160_CATEGORY: 'Qualité de l’air',
         ENS160_READ: 'Lire la valeur de qualité de l’air de %1',
         KS_SERVO_CATEGORY: 'Servo',
         KS_SERVO_ANGLE: 'Servo broche %1 canal %2 angle %3 délai(ms) %4',
         KS_SERVO_READ: 'Servo broche %1 lire degrés',
         MOTOR130_CATEGORY: 'Moteur',
         MOTOR130: 'Moteur INA#%1 niveau %2 INB#%3 valeur de sortie analogique %4',
 
         BBRGBLEDSTRIP_CATEGORY: 'RGB',
         BBRGBLEDSTRIP_INIT: 'Initialiser nombre de LED RGB %1 broche %2',
         BBRGBLEDSTRIP_SETPIXELCOLOR: 'Définir pixel %1 couleur %2',
         BBRGBLEDSTRIP_FILL: 'remplir à partir du pixel %1 compter %2 avec la couleur %3',
         BBRGBLEDSTRIP_COLOR: 'Couleur RGB R %1 G %2 B %3',
         BBRGBLEDSTRIP_SETBRIGHTNESS: 'Régler la luminosité %1',
         BBRGBLEDSTRIP_CLEAR: 'Tout effacer',
         BBRGBLEDSTRIP_SHOW: 'Actualiser',
         RC522_CATEGORY: 'RFID',
         RC522_INIT: 'Initialiser RFID',
         RC522_READ: 'Lire valeur de carte',
         OLED_CATEGORY: 'OLED',
         OLED_INIT: 'Initialiser écran OLED',
         OLED_SETTEXT: 'Définir taille de police %1',
         OLED_SETCURSOR: 'Définir curseur x : %1 y : %2',
         OLED_PRINT: 'Imprimer %1 %2',
         OLED_EOL_WARP: 'Retour à la ligne',
         OLED_EOL_NOWARP: 'Sans retour à la ligne',
         OLED_IMAGE: 'OLED afficher l’image %1',
         OLED_CLEAR: 'Effacer OLED',
         OLED_REFRESH: 'Actualiser OLED',
         WIFI_CATEGORY: 'WIFI',
         WIFI_INIT: 'Connecter WiFi SSID %1 mot de passe %2',
         // WIFI_READ: 'Lire les données WiFi',
         WIFI_READ_IP: 'Lire IP WiFi',
         WIFI_CLIENT_INIT: 'Initialiser client WiFi',
         WIFI_CLIENT_CONNECTED: 'Client WiFi non connecté',
         WIFI_READ_DATA: 'Lire données WiFi',
         WIFI_SEND_DATA: 'Envoyer données WiFi'
    });
    Object.assign(Blockly.ScratchMsgs.locales['ja'], {
        KS_VARIABLE_LABEL:'変数タイプ',
         KS_variables_declare:'%1 変数を宣言します。タイプ %2 名前 %3 を %4 に割り当てます',
         KS_variables_set:'%1 変数を %2 で設定',
         KS_variables_change:'%1 変数モード %2 を変更',
         KS_variables_value: '変数 %1',
         KS_variables_setString:'%1 文字列変数を %2 で設定',
         KS_global:'グローバル',
         KS_local:'ローカル',
         KS_MATH_INT: 'int',
         KS_MATH_LONG: '長い',
         KS_MATH_FLOAT: '浮動小数点',
         KS_MATH_BOOLEAN: 'ブール値',
         KS_MATH_BYTE: 'バイト',
         KS_MATH_CHAR: '文字',
         KS_MATH_STRING: '文字列',
         KS_MATH_UNSIGNED_INT: '符号なし整数',
         KS_MATH_WORD: '単語',
         KS_MATH_UNSIGNED_LONG: '符号なしロング',
         KS_MATH_UNSIGNED_CHAR: '符号なし文字',
         KS_MATH_DOUBLE: '倍精度',

         KS_TEXT_LABEL:'テキスト',
         KS_char: 'char%1',
         KS_string: 'string%1',
         KS_data: '%1',

         KS_LOGIC_LABEL:'ロジック',
         KS_judge:'%1 %2 %3',
         LED_CATEGORY: 'ランプ',
         LED_SET_LED_STATE: 'ランプ インターフェース%1 出力%2',
         LED_ANALOG: 'ランプ %1 チャンネル%2 アナログ出力%3',
         BUZZER_CATEGORY: '音楽',
         BUZZER_TONE_D: 'トーン再生 ピン%1 周波数%2 拍%3',
         BUZZER_MUSIC: '音楽 ピン%1 音楽を再生%2',
         BUZZER_NOTONE: 'トーン停止 ピン%1',
 
         BUTTON_CATEGORY: 'ボタン',
         BUTTON_READ_STATE: 'インターフェース%1 のボタンは押されていますか？',
         BUTTON_READ_VALUE: 'インターフェース%1 のボタンの状態値',
         PIR_CATEGORY: 'PIR',
         PIR_READ_VALUE: 'インターフェース%1 のPIRセンサーを読む',
         INFRARED_CATEGORY: 'IR 障害物回避',
         INFRARED_READ_VALUE: 'インターフェース%1 の障害物回避センサーを読む',
         LIGHTSENSOR_CATEGORY: '光',
         LIGHTSENSOR_READ_VALUE: 'インターフェース%1 の光値を読む',
         AHT20_CATEGORY: '温湿度',
         AHT20_READ: 'AHT20 温度/湿度を読む %1',
         ENS160_CATEGORY: '空気質',
         ENS160_READ: '空気質の値を読む %1',
         KS_SERVO_CATEGORY: 'サーボ',
         KS_SERVO_ANGLE: 'サーボ ピン%1 チャンネル%2 角度%3 遅延(ms)%4',
         KS_SERVO_READ: 'サーボ ピン%1 角度を読む',
         MOTOR130_CATEGORY: 'モーター',
         MOTOR130: 'モーター INA#%1 レベル%2 INB#%3 アナログ出力値%4',
 
         BBRGBLEDSTRIP_CATEGORY: 'RGB',
         BBRGBLEDSTRIP_INIT: 'RGB 個数%1 ピン%2 を初期化',
         BBRGBLEDSTRIP_SETPIXELCOLOR: 'ピクセル%1 色%2 を設定',
         BBRGBLEDSTRIP_FILL: 'ピクセル %1 から ピクセル %2 まで 色 %3',
         BBRGBLEDSTRIP_COLOR: 'RGB色 R %1 G %2 B %3',
         BBRGBLEDSTRIP_SETBRIGHTNESS: '明るさ%1 を設定',
         BBRGBLEDSTRIP_CLEAR: 'すべてクリア',
         BBRGBLEDSTRIP_SHOW: '更新',
         RC522_CATEGORY: 'RFID',
         RC522_INIT: 'RFID を初期化',
         RC522_READ: 'カード値を読む',
         OLED_CATEGORY: 'OLED',
         OLED_INIT: 'OLED画面を初期化',
         OLED_SETTEXT: 'フォントサイズ%1 を設定',
         OLED_SETCURSOR: 'カーソル設定 x: %1 y: %2',
         OLED_PRINT: '印刷 %1 %2',
         OLED_EOL_WARP: '改行',
         OLED_EOL_NOWARP: '改行なし',
         OLED_IMAGE: 'OLED 画像表示%1',
         OLED_CLEAR: 'OLED をクリア',
         OLED_REFRESH: 'OLED を更新',
         WIFI_CATEGORY: 'Wi-Fi',
         WIFI_INIT: 'Wi‑Fi 接続 SSID %1 パスワード %2',
         // WIFI_READ: 'Wi‑Fi データを読む',
         WIFI_READ_IP: 'Wi‑Fi IP を読む',
         WIFI_CLIENT_INIT: 'Wi‑Fi クライアントを初期化',
         WIFI_CLIENT_CONNECTED: 'Wi‑Fi クライアント未接続',
         WIFI_READ_DATA: 'Wi‑Fi データを読む',
         WIFI_SEND_DATA: 'Wi‑Fi データを送信'
    });
    Object.assign(Blockly.ScratchMsgs.locales['ko'], {
        KS_VARIABLE_LABEL:'변수 유형',
         KS_variables_declare:'%1 변수 유형 %2 이름 %3 선언 %4에 할당됨',
         KS_variables_set:'%1 변수를 %2로 설정',
         KS_variables_change:'%1 변수 모드 %2 변경',
         KS_variables_value: '변수 %1',
         KS_variables_setString:'%1 문자열 변수를 %2로 설정',
         KS_global:'글로벌',
         KS_local:'로컬',
         KS_MATH_INT: '정수',
         KS_MATH_LONG: '긴',
         KS_MATH_FLOAT: '부동',
         KS_MATH_BOOLEAN: '부울',
         KS_MATH_BYTE: '바이트',
         KS_MATH_CHAR: '문자',
         KS_MATH_STRING: '문자열',
         KS_MATH_UNSIGNED_INT: '부호 없는 정수',
         KS_MATH_WORD: '단어',
         KS_MATH_UNSIGNED_LONG: '부호 없는 롱',
         KS_MATH_UNSIGNED_CHAR: '부호 없는 문자',
         KS_MATH_DOUBLE: '더블',

         KS_TEXT_LABEL:'텍스트',
         KS_char: '문자%1',
         KS_string: '문자열%1',
         KS_data: '%1',

         KS_LOGIC_LABEL:'논리',
         KS_judge:'%1 %2 %3',
         LED_CATEGORY: '램프',
        LED_SET_LED_STATE: '램프 인터페이스 %1 출력 %2',
        LED_ANALOG: '램프 %1 채널 %2 아날로그 출력 %3',
        BUZZER_CATEGORY: '음악',
        BUZZER_TONE_D: '톤 재생 핀 %1 주파수 %2 박자 %3',
        BUZZER_MUSIC: '음악 핀 %1 음악 재생 %2',
        BUZZER_NOTONE: '톤 중지 핀 %1',

        BUTTON_CATEGORY: '버튼',
        BUTTON_READ_STATE: '인터페이스 %1 의 버튼이 눌렸습니까?',
        BUTTON_READ_VALUE: '인터페이스 %1 버튼의 상태 값',
        PIR_CATEGORY: 'PIR',
        PIR_READ_VALUE: '인터페이스 %1 PIR 센서 읽기',
        INFRARED_CATEGORY: 'IR 장애물 회피',
        INFRARED_READ_VALUE: '인터페이스 %1 장애물 회피 센서 읽기',
        LIGHTSENSOR_CATEGORY: '빛',
        LIGHTSENSOR_READ_VALUE: '인터페이스 %1 빛 값 읽기',
        AHT20_CATEGORY: '온습도',
        AHT20_READ: 'AHT20 온도/습도 읽기 %1',
        ENS160_CATEGORY: '공기질',
        ENS160_READ: '공기질 값 읽기 %1',
        KS_SERVO_CATEGORY: '서보',
        KS_SERVO_ANGLE: '서보 핀 %1 채널 %2 각도 %3 지연(ms) %4',
        KS_SERVO_READ: '서보 핀 %1 각도 읽기',
        MOTOR130_CATEGORY: '모터',
        MOTOR130: '모터 INA#%1 레벨 %2 INB#%3 아날로그 출력 값 %4',

        BBRGBLEDSTRIP_CATEGORY: 'RGB',
        BBRGBLEDSTRIP_INIT: 'RGB 개수 %1 핀 %2 초기화',
        BBRGBLEDSTRIP_SETPIXELCOLOR: '픽셀 %1 색상 %2 설정',
        BBRGBLEDSTRIP_FILL: '픽셀 %1번부터 %2개 색상 %3로 채우기',
        BBRGBLEDSTRIP_COLOR: 'RGB 색상 R %1 G %2 B %3',
        BBRGBLEDSTRIP_SETBRIGHTNESS: '밝기 %1 설정',
        BBRGBLEDSTRIP_CLEAR: '모두 지우기',
        BBRGBLEDSTRIP_SHOW: '새로고침',
        RC522_CATEGORY: 'RFID',
        RC522_INIT: 'RFID 초기화',
        RC522_READ: '카드 값 읽기',
        OLED_CATEGORY: 'OLED',
        OLED_INIT: 'OLED 화면 초기화',
        OLED_SETTEXT: '글꼴 크기 %1 설정',
        OLED_SETCURSOR: '커서 설정 x: %1 y: %2',
        OLED_PRINT: '인쇄 %1 %2',
        OLED_EOL_WARP: '줄바꿈',
        OLED_EOL_NOWARP: '줄바꿈 없음',
        OLED_IMAGE: 'OLED 이미지 표시 %1',
        OLED_CLEAR: 'OLED 지우기',
        OLED_REFRESH: 'OLED 새로고침',
        WIFI_CATEGORY: 'Wi‑Fi',
        WIFI_INIT: 'Wi‑Fi 연결 SSID %1 비밀번호 %2',
        // WIFI_READ: 'Wi‑Fi 데이터 읽기',
        WIFI_READ_IP: 'Wi‑Fi IP 읽기',
        WIFI_CLIENT_INIT: 'Wi‑Fi 클라이언트 초기화',
        WIFI_CLIENT_CONNECTED: 'Wi‑Fi 클라이언트 미연결',
        WIFI_READ_DATA: 'Wi‑Fi 데이터 읽기',
        WIFI_SEND_DATA: 'Wi‑Fi 데이터 보내기'
    });
    Object.assign(Blockly.ScratchMsgs.locales['pl'], {
        KS_VARIABLE_LABEL:'Typ zmiennej',
        KS_variables_declare:'Deklaracja %1 zmiennej Typ %2 Nazwa %3 Przypisana do %4',
        KS_variables_set:'Ustaw zmienną %1 na %2',
        KS_variables_change:'Zmień tryb zmiennej %1 %2',
        KS_variables_value: 'zmienna %1',
        KS_variables_setString:'Ustaw zmienną łańcuchową %1 o %2',
        KS_global:'Globalny',
        KS_local:'Lokalny',
        KS_MATH_INT: 'int',
        KS_MATH_LONG: 'długi',
        KS_MATH_FLOAT: 'pływa',
        KS_MATH_BOOLEAN: 'wartość logiczna',
        KS_MATH_BYTE: 'bajt',
        KS_MATH_CHAR: 'znak',
        KS_MATH_STRING: 'ciąg znaków',
        KS_MATH_UNSIGNED_INT: 'bez znaku int',
        KS_MATH_WORD: 'słowo',
        KS_MATH_UNSIGNED_LONG: 'długi bez znaku',
        KS_MATH_UNSIGNED_CHAR: 'znak bez znaku',
        KS_MATH_DOUBLE: 'podwójne',

        KS_TEXT_LABEL:'TEKST',
        KS_char: 'znak%1',
        KS_string: 'ciąg%1',
        KS_data: '%1',

        KS_LOGIC_LABEL:'logika',
        KS_judge:'%1%2%3',
        LED_CATEGORY: 'Lampa',
        LED_SET_LED_STATE: 'Interfejs lampy %1 wyjście %2',
        LED_ANALOG: 'Lampa %1 kanał %2 wyjście analogowe %3',
        BUZZER_CATEGORY: 'Muzyka',
        BUZZER_TONE_D: 'Odtwórz ton pin %1 częstotliwość %2 takt %3',
        BUZZER_MUSIC: 'Muzyka pin %1 odtwórz muzykę %2',
        BUZZER_NOTONE: 'Zatrzymaj ton pin %1',

        BUTTON_CATEGORY: 'Przycisk',
        BUTTON_READ_STATE: 'Czy przycisk na interfejsie %1 jest wciśnięty?',
        BUTTON_READ_VALUE: 'Wartość stanu przycisku na interfejsie %1',
        PIR_CATEGORY: 'PIR',
        PIR_READ_VALUE: 'Odczytaj interfejs %1 czujnik PIR',
        INFRARED_CATEGORY: 'IR unikanie przeszkód',
        INFRARED_READ_VALUE: 'Odczytaj interfejs %1 czujnik unikania przeszkód',
        LIGHTSENSOR_CATEGORY: 'Światło',
        LIGHTSENSOR_READ_VALUE: 'Odczytaj wartość światła z interfejsu %1',
        AHT20_CATEGORY: 'T&H',
        AHT20_READ: 'Odczytaj AHT20 temperatura/wilgotność %1',
        ENS160_CATEGORY: 'Jakość powietrza',
        ENS160_READ: 'Odczytaj wartość jakości powietrza z %1',
        KS_SERVO_CATEGORY: 'Serwo',
        KS_SERVO_ANGLE: 'Serwo pin %1 kanał %2 kąt %3 opóźnienie(ms) %4',
        KS_SERVO_READ: 'Serwo pin %1 odczytaj stopnie',
        MOTOR130_CATEGORY: 'Silnik',
        MOTOR130: 'Silnik INA#%1 poziom %2 INB#%3 wartość wyjścia analogowego %4',

        BBRGBLEDSTRIP_CATEGORY: 'RGB',
        BBRGBLEDSTRIP_INIT: 'Inicjalizuj liczbę RGB %1 pin %2',
        BBRGBLEDSTRIP_SETPIXELCOLOR: 'Ustaw piksel %1 kolor %2',
        BBRGBLEDSTRIP_FILL: 'wypełnij piksel %1 liczba %2 kolorem %3',
        BBRGBLEDSTRIP_COLOR: 'Kolor RGB R %1 G %2 B %3',
        BBRGBLEDSTRIP_SETBRIGHTNESS: 'Ustaw jasność %1',
        BBRGBLEDSTRIP_CLEAR: 'Wyczyść wszystko',
        BBRGBLEDSTRIP_SHOW: 'Odśwież',
        RC522_CATEGORY: 'RFID',
        RC522_INIT: 'Inicjalizuj RFID',
        RC522_READ: 'Odczytaj wartość karty',
        OLED_CATEGORY: 'OLED',
        OLED_INIT: 'Inicjalizuj ekran OLED',
        OLED_SETTEXT: 'Ustaw rozmiar czcionki %1',
        OLED_SETCURSOR: 'Ustaw kursor x: %1 y: %2',
        OLED_PRINT: 'Drukuj %1 %2',
        OLED_EOL_WARP: 'Zawijanie wiersza',
        OLED_EOL_NOWARP: 'Bez zawijania',
        OLED_IMAGE: 'OLED wyświetl obraz %1',
        OLED_CLEAR: 'Wyczyść OLED',
        OLED_REFRESH: 'Odśwież OLED',
        WIFI_CATEGORY: 'Wi‑Fi',
        WIFI_INIT: 'Połącz z Wi‑Fi SSID %1 hasło %2',
        // WIFI_READ: 'Odczytaj dane Wi‑Fi',
        WIFI_READ_IP: 'Odczytaj IP Wi‑Fi',
        WIFI_CLIENT_INIT: 'Inicjalizuj klienta Wi‑Fi',
        WIFI_CLIENT_CONNECTED: 'Klient Wi‑Fi niepołączony',
        WIFI_READ_DATA: 'Odczytaj dane Wi‑Fi',
        WIFI_SEND_DATA: 'Wyślij dane przez Wi‑Fi'
    });
    Object.assign(Blockly.ScratchMsgs.locales['pt'], {
        KS_VARIABLE_LABEL:'Tipo de variável',
         KS_variables_declare:'Declare %1 variável Tipo %2 Nome %3 Atribuído a %4',
         KS_variables_set:'Definir %1 variável por %2',
         KS_variables_change:'Alterar %1 modo de variável %2',
         KS_variables_value: 'variável %1',
         KS_variables_setString:'Definir variável de string %1 por %2',
         KS_global:'Global',
         KS_local:'Local',
         KS_MATH_INT: 'int',
         KS_MATH_LONG: 'longo',
         KS_MATH_FLOAT: 'flutuar',
         KS_MATH_BOOLEAN: 'booleano',
         KS_MATH_BYTE: 'byte',
         KS_MATH_CHAR: 'char',
         KS_MATH_STRING: 'string',
         KS_MATH_UNSIGNED_INT: 'int unsigned',
         KS_MATH_WORD: 'palavra',
         KS_MATH_UNSIGNED_LONG: 'não assinado longo',
         KS_MATH_UNSIGNED_CHAR: 'caractere não assinado',
         KS_MATH_DOUBLE: 'duplo',

         KS_TEXT_LABEL:'TEXT',
         KS_char: 'char%1',
         KS_string: 'string%1',
         KS_data: '%1',

         KS_LOGIC_LABEL:'lógica',
         KS_judge:'%1 %2 %3',
         LED_CATEGORY: 'Lâmpada',
        LED_SET_LED_STATE: 'Interface da lâmpada %1 saída %2',
        LED_ANALOG: 'Lâmpada %1 canal %2 saída analógica %3',
        BUZZER_CATEGORY: 'Música',
        BUZZER_TONE_D: 'Reproduzir tom pino %1 frequência %2 batida %3',
        BUZZER_MUSIC: 'Música pino %1 reproduzir música %2',
        BUZZER_NOTONE: 'Parar tom pino %1',

        BUTTON_CATEGORY: 'Botão',
        BUTTON_READ_STATE: 'O botão na interface %1 está pressionado?',
        BUTTON_READ_VALUE: 'Valor de estado do botão na interface %1',
        PIR_CATEGORY: 'PIR',
        PIR_READ_VALUE: 'Ler interface %1 sensor PIR',
        INFRARED_CATEGORY: 'IR desvio de obstáculos',
        INFRARED_READ_VALUE: 'Ler interface %1 sensor de desvio de obstáculos',
        LIGHTSENSOR_CATEGORY: 'Luz',
        LIGHTSENSOR_READ_VALUE: 'Ler valor de luz da interface %1',
        AHT20_CATEGORY: 'T&H',
        AHT20_READ: 'Ler AHT20 temperatura/umidade %1',
        ENS160_CATEGORY: 'Qualidade do ar',
        ENS160_READ: 'Ler valor da qualidade do ar de %1',
        KS_SERVO_CATEGORY: 'Servo',
        KS_SERVO_ANGLE: 'Servo pino %1 canal %2 ângulo %3 atraso(ms) %4',
        KS_SERVO_READ: 'Servo pino %1 ler graus',
        MOTOR130_CATEGORY: 'Motor',
        MOTOR130: 'Motor INA#%1 nível %2 INB#%3 valor de saída analógica %4',

        BBRGBLEDSTRIP_CATEGORY: 'RGB',
        BBRGBLEDSTRIP_INIT: 'Iniciar contagem RGB %1 pino %2',
        BBRGBLEDSTRIP_SETPIXELCOLOR: 'Definir pixel %1 cor %2',
        BBRGBLEDSTRIP_FILL: 'preencher do pixel %1 contagem %2 com a cor %3',
        BBRGBLEDSTRIP_COLOR: 'Cor RGB R %1 G %2 B %3',
        BBRGBLEDSTRIP_SETBRIGHTNESS: 'Definir brilho %1',
        BBRGBLEDSTRIP_CLEAR: 'Limpar tudo',
        BBRGBLEDSTRIP_SHOW: 'Atualizar',
        RC522_CATEGORY: 'RFID',
        RC522_INIT: 'Iniciar RFID',
        RC522_READ: 'Ler valor do cartão',
        OLED_CATEGORY: 'OLED',
        OLED_INIT: 'Iniciar tela OLED',
        OLED_SETTEXT: 'Definir tamanho da fonte %1',
        OLED_SETCURSOR: 'Definir cursor x: %1 y: %2',
        OLED_PRINT: 'Imprimir %1 %2',
        OLED_EOL_WARP: 'Quebra de linha',
        OLED_EOL_NOWARP: 'Sem quebra de linha',
        OLED_IMAGE: 'OLED exibir imagem %1',
        OLED_CLEAR: 'Limpar OLED',
        OLED_REFRESH: 'Atualizar OLED',
        WIFI_CATEGORY: 'Wi‑Fi',
        WIFI_INIT: 'Conectar ao Wi‑Fi SSID %1 senha %2',
        // WIFI_READ: 'Ler dados do Wi‑Fi',
        WIFI_READ_IP: 'Ler IP do Wi‑Fi',
        WIFI_CLIENT_INIT: 'Iniciar cliente Wi‑Fi',
        WIFI_CLIENT_CONNECTED: 'Cliente Wi‑Fi não conectado',
        WIFI_READ_DATA: 'Ler dados do Wi‑Fi',
        WIFI_SEND_DATA: 'Enviar dados por Wi‑Fi'
    });
    Object.assign(Blockly.ScratchMsgs.locales['ru'], {
        KS_VARIABLE_LABEL: 'Тип переменной',
         KS_variables_declare:'Объявить переменную %1 Тип %2 Имя %3 Назначено %4',
         KS_variables_set:'Установить переменную %1 на %2',
         KS_variables_change:'Изменить режим переменной %1 %2',
         KS_variables_value: 'переменная %1',
         KS_variables_setString:'Установить %1 строковую переменную на %2',
         KS_global: 'Глобальный',
         KS_local: 'Местный',
         KS_MATH_INT: 'целое',
         KS_MATH_LONG: 'длинный',
         KS_MATH_FLOAT: 'плавающая',
         KS_MATH_BOOLEAN: 'логическое значение',
         KS_MATH_BYTE: 'байт',
         KS_MATH_CHAR: 'символ',
         KS_MATH_STRING: 'строка',
         KS_MATH_UNSIGNED_INT: 'целое число без знака',
         KS_MATH_WORD: 'слово',
         KS_MATH_UNSIGNED_LONG: 'длинное без знака',
         KS_MATH_UNSIGNED_CHAR: 'беззнаковый символ',
         KS_MATH_DOUBLE: 'двойной',

         KS_TEXT_LABEL:'ТЕКСТ',
         KS_char: 'символ%1',
         KS_string: 'строка%1',
         KS_data: '%1',

         KS_LOGIC_LABEL: 'логика',
         KS_judge:'%1 %2 %3',
         LED_CATEGORY: 'Лампа',
         LED_SET_LED_STATE: 'Интерфейс лампы %1 выход %2',
         LED_ANALOG: 'Лампа %1 канал %2 аналоговый выход %3',
         BUZZER_CATEGORY: 'Музыка',
         BUZZER_TONE_D: 'Воспроизвести тон пин %1 частота %2 длительность %3',
         BUZZER_MUSIC: 'Музыка пин %1 воспроизвести музыку %2',
         BUZZER_NOTONE: 'Остановить тон пин %1',
 
         BUTTON_CATEGORY: 'Кнопка',
         BUTTON_READ_STATE: 'Кнопка на интерфейсе %1 нажата?',
         BUTTON_READ_VALUE: 'Состояние кнопки на интерфейсе %1',
         PIR_CATEGORY: 'PIR',
         PIR_READ_VALUE: 'Считать интерфейс %1 датчик PIR',
         INFRARED_CATEGORY: 'ИК обход препятствий',
         INFRARED_READ_VALUE: 'Считать интерфейс %1 датчик обхода препятствий',
         LIGHTSENSOR_CATEGORY: 'Свет',
         LIGHTSENSOR_READ_VALUE: 'Считать значение освещенности интерфейса %1',
         AHT20_CATEGORY: 'T&H',
         AHT20_READ: 'Считать AHT20 температура/влажность %1',
         ENS160_CATEGORY: 'Качество воздуха',
         ENS160_READ: 'Считать значение качества воздуха с %1',
         KS_SERVO_CATEGORY: 'Серво',
         KS_SERVO_ANGLE: 'Серво пин %1 канал %2 угол %3 задержка(мс) %4',
         KS_SERVO_READ: 'Серво пин %1 считать градусы',
         MOTOR130_CATEGORY: 'Мотор',
         MOTOR130: 'Мотор INA#%1 уровень %2 INB#%3 значение аналогового выхода %4',
 
         BBRGBLEDSTRIP_CATEGORY: 'RGB',
         BBRGBLEDSTRIP_INIT: 'Инициализировать количество RGB %1 пин %2',
         BBRGBLEDSTRIP_SETPIXELCOLOR: 'Установить пиксель %1 цвет %2',
         BBRGBLEDSTRIP_FILL: 'залить от пикселя %1 отсчета %2 цветом %3',
         BBRGBLEDSTRIP_COLOR: 'Цвет RGB R %1 G %2 B %3',
         BBRGBLEDSTRIP_SETBRIGHTNESS: 'Установить яркость %1',
         BBRGBLEDSTRIP_CLEAR: 'Очистить все',
         BBRGBLEDSTRIP_SHOW: 'Обновить',
         RC522_CATEGORY: 'RFID',
         RC522_INIT: 'Инициализировать RFID',
         RC522_READ: 'Считать значение карты',
         OLED_CATEGORY: 'OLED',
         OLED_INIT: 'Инициализировать экран OLED',
         OLED_SETTEXT: 'Установить размер шрифта %1',
         OLED_SETCURSOR: 'Установить курсор x: %1 y: %2',
         OLED_PRINT: 'Печать %1 %2',
         OLED_EOL_WARP: 'Перенос строки',
         OLED_EOL_NOWARP: 'Без переноса',
         OLED_IMAGE: 'OLED показать изображение %1',
         OLED_CLEAR: 'Очистить OLED',
         OLED_REFRESH: 'Обновить OLED',
         WIFI_CATEGORY: 'Wi‑Fi',
         WIFI_INIT: 'Подключить Wi‑Fi SSID %1 пароль %2',
         // WIFI_READ: 'Считать данные Wi‑Fi',
         WIFI_READ_IP: 'Считать IP Wi‑Fi',
         WIFI_CLIENT_INIT: 'Инициализировать клиент Wi‑Fi',
         WIFI_CLIENT_CONNECTED: 'Клиент Wi‑Fi не подключен',
         WIFI_READ_DATA: 'Считать данные Wi‑Fi',
         WIFI_SEND_DATA: 'Отправить данные по Wi‑Fi'
    });
    Object.assign(Blockly.ScratchMsgs.locales['zh-tw'], {
        KS_VARIABLE_LABEL:'變量類型',
        KS_variables_declare:'聲明 %1 數字變量 類型 %2 名稱 %3 賦值為 %4',
        KS_variables_declare2:'聲明 %1 字符串變量 類型 %2 名稱 %3 賦值為 %4',
        KS_variables_set:'設置 %1 變量 為 %2',
        KS_variables_change:'設置 %1 變量 模式 %2',
        KS_variables_value: '變量 %1',
        KS_variables_setString:'設置 %1 字符串變量 為 %2',
        KS_global:'全局',
        KS_local:'局部',
        KS_MATH_INT: '整數',
        KS_MATH_LONG: '長整數',
        KS_MATH_FLOAT: '小數',
        KS_MATH_BOOLEAN: '布爾',
        KS_MATH_BYTE: '字節',
        KS_MATH_CHAR: '字符',
        KS_MATH_STRING: '字符串',
        KS_MATH_UNSIGNED_INT: '無符號整數',
        KS_MATH_WORD: '字',
        KS_MATH_UNSIGNED_LONG: '無符號長整數',
        KS_MATH_UNSIGNED_CHAR: '無符號字符',
        KS_MATH_DOUBLE: '雙精度浮點數',

        KS_TEXT_LABEL:'文本',
        KS_char: '\'%1\'',
        KS_string: '\"%1\"',
        KS_data: '%1',

        KS_LOGIC_LABEL:'邏輯',
        KS_judge:'%1 %2 %3',
        LED_CATEGORY: '操場燈',
        LED_SET_LED_STATE: '操場燈 接口%1 輸出%2 ',
        LED_ANALOG: '操場燈 %1 通道%2 模擬輸出%3',
        BUZZER_CATEGORY: '校園廣播',
        BUZZER_TONE_D: '播放聲音 腳位%1 頻率%2 節拍%3',
        BUZZER_MUSIC: '校園廣播 腳位%1 播放音樂%2',
        BUZZER_NOTONE: '結束聲音 腳位%1',

        BUTTON_CATEGORY: '按鍵',
        BUTTON_READ_STATE: '接口%1按鈕被按下?',
        BUTTON_READ_VALUE: '接口%1按鈕的狀態值',
        PIR_CATEGORY: '人體紅外',
        PIR_READ_VALUE: '讀取接口 %1 紅外熱釋電感測器',
        INFRARED_CATEGORY: '避障',
        INFRARED_READ_VALUE: '讀取接口 %1 避障感測器',
        LIGHTSENSOR_CATEGORY: '光線',
        LIGHTSENSOR_READ_VALUE: '讀取接口%1光線強度',
        AHT20_CATEGORY: '溫濕度',
        AHT20_READ: '溫濕度AHT20讀取 %1',
        ENS160_CATEGORY: '空氣品質',
        ENS160_READ: '讀取空氣品質 %1 的值',
        KS_SERVO_CATEGORY: '舵機',
        KS_SERVO_ANGLE: '舵機 腳位%1 通道%2 角度%3 延時(毫秒)%4',
        KS_SERVO_READ: '舵機 腳位%1 讀取度數',
        MOTOR130_CATEGORY: '電機',
        MOTOR130: '電機 INA#%1 電平為%2 INB#%3 模擬輸出值%4',

        BBRGBLEDSTRIP_CATEGORY: '教室燈',
        BBRGBLEDSTRIP_INIT: '初始化教室燈顆數 %1 腳位 %2',
        BBRGBLEDSTRIP_SETPIXELCOLOR: '設定像素 %1 顏色 %2',
        BBRGBLEDSTRIP_FILL: '從像素 %1 開始 到像素 %2 顏色 %3',
        BBRGBLEDSTRIP_COLOR: '教室燈顏色 R %1 G %2 B %3',
        BBRGBLEDSTRIP_SETBRIGHTNESS: '設定亮度 %1',
        BBRGBLEDSTRIP_CLEAR: '清除所有',
        BBRGBLEDSTRIP_SHOW: '刷新',   
        RC522_CATEGORY: '校园門禁',
        RC522_INIT: '初始化 校园門禁',
        RC522_READ: '讀取卡值',
        OLED_CATEGORY: 'OLED螢幕',
        OLED_INIT: '初始化 OLED螢幕',
        OLED_SETTEXT: '設定字體大小 %1',
        OLED_SETCURSOR: '設定游標 x: %1 y: %2',
        OLED_PRINT: '列印 %1 %2',
        OLED_EOL_WARP: '換行',
        OLED_EOL_NOWARP: '不換行',
        OLED_IMAGE: 'oled 顯示圖片%1',
        OLED_CLEAR: '清空 oled',
        OLED_REFRESH: '刷新 oled',
        WIFI_CATEGORY: 'WIFI',
        WIFI_INIT: '連接WiFi 名稱%1 密碼%2',
        // WIFI_READ: 'WiFi 讀取資料',
        WIFI_READ_IP: 'WiFi 讀取IP',
        WIFI_CLIENT_INIT: 'WiFi 初始化客戶端',
        WIFI_CLIENT_CONNECTED: 'WiFi 沒有連接客戶端',
        WIFI_READ_DATA: 'WiFi 讀取資料',
        WIFI_SEND_DATA: 'WiFi 傳送資料'
    });
    Object.assign(Blockly.ScratchMsgs.locales['zh-cn'], {
        KS_VARIABLE_LABEL:'变量类型',
        KS_variables_declare:'声明 %1 数字变量 类型 %2 名称 %3 赋值为 %4',
        KS_variables_declare2:'声明 %1 字符串变量 类型 %2 名称 %3 赋值为 %4',
        KS_variables_set:'设置 %1 变量 为 %2',
        KS_variables_change:'设置 %1 变量 模式 %2',
        KS_variables_value: '变量 %1',
        KS_variables_setString:'设置 %1 字符串变量 为 %2',
        KS_global:'全局',
        KS_local:'局部',
        KS_MATH_INT: '整数',
        KS_MATH_LONG: '长整数',
        KS_MATH_FLOAT: '小数',
        KS_MATH_BOOLEAN: '布尔',
        KS_MATH_BYTE: '字节',
        KS_MATH_CHAR: '字符',
        KS_MATH_STRING: '字符串',
        KS_MATH_UNSIGNED_INT: '无符号整数',
        KS_MATH_WORD: '字',
        KS_MATH_UNSIGNED_LONG: '无符号长整数',
        KS_MATH_UNSIGNED_CHAR: '无符号字符',
        KS_MATH_DOUBLE: '双精度浮点数',

        KS_TEXT_LABEL:'文本',
        KS_char: '\'%1\'',
        KS_string: '\"%1\"',
        KS_data: '%1',

        KS_LOGIC_LABEL:'逻辑',
        KS_judge:'%1 %2 %3',
        LED_CATEGORY: '操场灯',
        LED_SET_LED_STATE: '操场灯 接口%1 输出%2 ',
        LED_ANALOG: '操场灯 %1 通道%2 模拟输出%3',
        BUZZER_CATEGORY: '校园广播',
        BUZZER_TONE_D: '播放声音 引脚%1 频率%2 节拍%3',
        BUZZER_MUSIC: '校园广播 引脚%1 播放音乐%2',
        BUZZER_NOTONE: '结束声音 引脚%1',

        BUTTON_CATEGORY: '按键',
        BUTTON_READ_STATE: '接口%1按钮被按下?',
        BUTTON_READ_VALUE: '接口%1按钮的状态值',
        PIR_CATEGORY: '人体红外',
        PIR_READ_VALUE: '读取接口 %1 红外热释电传感器',
        INFRARED_CATEGORY: '避障',
        INFRARED_READ_VALUE: '读取接口 %1 避障传感器',
        LIGHTSENSOR_CATEGORY: '光线',
        LIGHTSENSOR_READ_VALUE: '读取接口%1光线强度',
        AHT20_CATEGORY: '温湿度',
        AHT20_READ: '温湿度AHT20读取 %1',
        ENS160_CATEGORY: '空气质量',
        ENS160_READ: '读取空气质量 %1 的值',
        KS_SERVO_CATEGORY: '舵机',
        KS_SERVO_ANGLE: '舵机 引脚%1 通道%2 角度%3 延时(毫秒)%4',
        KS_SERVO_READ: '舵机 引脚%1 读取度数',
        MOTOR130_CATEGORY: '电机',
        MOTOR130: '电机 INA#%1 电平为%2 INB#%3 模拟输出值%4',

        BBRGBLEDSTRIP_CATEGORY: '教室灯',
        BBRGBLEDSTRIP_INIT: '初始化教室灯颗数 %1 引脚 %2',
        BBRGBLEDSTRIP_SETPIXELCOLOR: '设置像素 %1 颜色 %2',
        BBRGBLEDSTRIP_FILL: '从像素 %1 开始 到像素 %2 颜色 %3',
        BBRGBLEDSTRIP_COLOR: '教室灯颜色 R %1 G %2 B %3',
        BBRGBLEDSTRIP_SETBRIGHTNESS: '设置亮度 %1',
        BBRGBLEDSTRIP_CLEAR: '清除所有',
        BBRGBLEDSTRIP_SHOW: '刷新',   
        RC522_CATEGORY: '校园门禁',
        RC522_INIT: '初始化 校园门禁',
        RC522_READ: '读取卡值',
        OLED_CATEGORY: 'OLED屏',
        OLED_INIT: '初始化 OLED屏',
        OLED_SETTEXT: '设置字体大小 %1',
        OLED_SETCURSOR: '设置光标 x: %1 y: %2',
        OLED_PRINT: '打印 %1 %2',
        OLED_EOL_WARP: '换行',
        OLED_EOL_NOWARP: '不换行',
        OLED_IMAGE: 'oled 显示图片%1',
        OLED_CLEAR: '清空 oled',
        OLED_REFRESH: '刷新 oled',
        WIFI_CATEGORY: 'WIFI',
        WIFI_INIT: '连接WiFi 名称%1 密码%2',
        // WIFI_READ: 'WiFi 读取数据',
        WIFI_READ_IP: 'WiFi 读取IP',
        WIFI_CLIENT_INIT: 'WiFi 初始化客户端',
        WIFI_CLIENT_CONNECTED: 'WiFi 没有连接客户端',
        WIFI_READ_DATA: 'WiFi 读取数据',
        WIFI_SEND_DATA: 'WiFi 发送数据'
        
    });
    Object.assign(Blockly.ScratchMsgs.locales['it'], {
        KS_VARIABLE_LABEL: 'Tipo di variabile',
        KS_variables_declare: 'Dichiara variabile numerica %1 tipo %2 nome %3 valore %4',
        KS_variables_declare2: 'Dichiara variabile stringa %1 tipo %2 nome %3 valore %4',
        KS_variables_set: 'Imposta variabile %1 su %2',
        KS_variables_change: 'Imposta variabile %1 modalità %2',
        KS_variables_value: 'Variabile %1',
        KS_variables_setString: 'Imposta variabile stringa %1 su %2',
        KS_global: 'Globale',
        KS_local: 'Locale',
        KS_MATH_INT: 'Intero',
        KS_MATH_LONG: 'Intero lungo',
        KS_MATH_FLOAT: 'Decimale',
        KS_MATH_BOOLEAN: 'Booleano',
        KS_MATH_BYTE: 'Byte',
        KS_MATH_CHAR: 'Carattere',
        KS_MATH_STRING: 'Stringa',
        KS_MATH_UNSIGNED_INT: 'Intero senza segno',
        KS_MATH_WORD: 'Parola',
        KS_MATH_UNSIGNED_LONG: 'Intero lungo senza segno',
        KS_MATH_UNSIGNED_CHAR: 'Carattere senza segno',
        KS_MATH_DOUBLE: 'Numero in virgola mobile doppia precisione',
        KS_TEXT_LABEL: 'TESTO',  
        KS_char: 'carattere%1',  
        KS_string: 'stringa%1',  
        KS_data: '%1', 
        KS_LOGIC_LABEL: 'Logica',
        KS_judge: '%1 %2 %3',
        LED_CATEGORY: 'Lampada',
        LED_SET_LED_STATE: 'Interfaccia lampada %1 uscita %2',
        LED_ANALOG: 'Lampada %1 canale %2 uscita analogica %3',
        BUZZER_CATEGORY: 'Musica',
        BUZZER_TONE_D: 'Riproduci tono pin %1 frequenza %2 battuta %3',
        BUZZER_MUSIC: 'Musica pin %1 riproduci musica %2',
        BUZZER_NOTONE: 'Ferma tono pin %1',

        BUTTON_CATEGORY: 'Pulsante',
        BUTTON_READ_STATE: 'Il pulsante sull’interfaccia %1 è premuto?',
        BUTTON_READ_VALUE: 'Valore di stato del pulsante sull’interfaccia %1',
        PIR_CATEGORY: 'PIR',
        PIR_READ_VALUE: 'Leggi interfaccia %1 sensore PIR',
        INFRARED_CATEGORY: 'IR evitamento ostacoli',
        INFRARED_READ_VALUE: 'Leggi interfaccia %1 sensore di evitamento ostacoli',
        LIGHTSENSOR_CATEGORY: 'Luce',
        LIGHTSENSOR_READ_VALUE: 'Leggi valore luce dell’interfaccia %1',
        AHT20_CATEGORY: 'T&H',
        AHT20_READ: 'Leggi AHT20 temperatura/umidità %1',
        ENS160_CATEGORY: 'Qualità dell’aria',
        ENS160_READ: 'Leggi valore della qualità dell’aria da %1',
        KS_SERVO_CATEGORY: 'Servo',
        KS_SERVO_ANGLE: 'Servo pin %1 canale %2 angolo %3 ritardo(ms) %4',
        KS_SERVO_READ: 'Servo pin %1 leggi gradi',
        MOTOR130_CATEGORY: 'Motore',
        MOTOR130: 'Motore INA#%1 livello %2 INB#%3 valore uscita analogica %4',

        BBRGBLEDSTRIP_CATEGORY: 'RGB',
        BBRGBLEDSTRIP_INIT: 'Inizializza quantità RGB %1 pin %2',
        BBRGBLEDSTRIP_SETPIXELCOLOR: 'Imposta pixel %1 colore %2',
        BBRGBLEDSTRIP_FILL: 'Da pixel %1 a pixel %2 Colore %3',
        BBRGBLEDSTRIP_COLOR: 'Colore RGB R %1 G %2 B %3',
        BBRGBLEDSTRIP_SETBRIGHTNESS: 'Imposta luminosità %1',
        BBRGBLEDSTRIP_CLEAR: 'Cancella tutto',
        BBRGBLEDSTRIP_SHOW: 'Aggiorna',
        RC522_CATEGORY: 'RFID',
        RC522_INIT: 'Inizializza RFID',
        RC522_READ: 'Leggi valore della carta',
        OLED_CATEGORY: 'OLED',
        OLED_INIT: 'Inizializza schermo OLED',
        OLED_SETTEXT: 'Imposta dimensione carattere %1',
        OLED_SETCURSOR: 'Imposta cursore x: %1 y: %2',
        OLED_PRINT: 'Stampa %1 %2',
        OLED_EOL_WARP: 'A capo',
        OLED_EOL_NOWARP: 'Senza a capo',
        OLED_IMAGE: 'OLED mostra immagine %1',
        OLED_CLEAR: 'Pulisci OLED',
        OLED_REFRESH: 'Aggiorna OLED',
        WIFI_CATEGORY: 'Wi‑Fi',
        WIFI_INIT: 'Connetti Wi‑Fi SSID %1 password %2',
        // WIFI_READ: 'Leggi dati Wi‑Fi',
        WIFI_READ_IP: 'Leggi IP Wi‑Fi',
        WIFI_CLIENT_INIT: 'Inizializza client Wi‑Fi',
        WIFI_CLIENT_CONNECTED: 'Client Wi‑Fi non connesso',
        WIFI_READ_DATA: 'Leggi dati Wi‑Fi',
        WIFI_SEND_DATA: 'Invia dati via Wi‑Fi'
    });

    return Blockly;
}

exports = addMsg;
