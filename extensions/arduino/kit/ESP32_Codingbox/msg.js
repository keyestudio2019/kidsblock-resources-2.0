/* eslint-disable func-style */
/* eslint-disable max-len */
/* eslint-disable require-jsdoc */
function addMsg (Blockly) {
    Object.assign(Blockly.ScratchMsgs.locales.en, {
        KS_VARIABLE_LABEL:'Variable Type',
        KS_variables_declare:'Declare %1 variable Type %2 Name %3 Assigned to %4',
        KS_variables_set:'Set %1 variable by %2',
        KS_variables_change:'Change %1 variable mode %2',
        KS_variables_value: 'variable %1',
        KS_variables_setString:'Set %1 String variable by %2',
        KS_global:'Global',
        KS_local:'Local',
        KS_MATH_INT: 'int',
        KS_MATH_LONG: 'long',
        KS_MATH_FLOAT: 'float',
        KS_MATH_BOOLEAN: 'boolean',
        KS_MATH_BYTE: 'byte',
        KS_MATH_CHAR: 'char',
        KS_MATH_STRING: 'string',
        KS_MATH_UNSIGNED_INT: 'unsigned int',
        KS_MATH_WORD: 'word',
        KS_MATH_UNSIGNED_LONG: 'unsigned long',
        KS_MATH_UNSIGNED_CHAR: 'unsigned char',
        KS_MATH_DOUBLE: 'double',

        KS_TEXT_LABEL:'TEXT',
        KS_char: 'char%1',
        KS_string: 'string%1',
        KS_data: '%1',

        KS_LOGIC_LABEL:'logic',
        KS_judge:'%1 %2 %3',
        LED_CATEGORY: 'LED',
        LED_SET_LED_STATE: 'LED pin%1 out%2',
        LED_ANALOG: 'LED %1 channel%2 analogWrite%3',
        ATBUZZER_CATEGORY: 'Buzzer',
        ATBUZZER_STATE: 'buzzer pin%1 out%2',
        BUZZER_CATEGORY: 'Speaker',
        BUZZER_TONE_D: 'Tone PIN#%1 frequency%2 duration%3',
        BUZZER_MUSIC: 'Tone PIN#%1 play music%2',
        BUZZER_NOTONE: 'NoTone%1',
        MOTOR130_CATEGORY: 'Motor',
        MOTOR130_DIGITAL: 'Motor INA#%1 State%2 INB#%3 State%4',
        MOTOR130_ANALOG: 'Motor INA#%1 State%2 INB#%3 channle%4 analogWrite%5',
        BUTTON_CATEGORY: 'Button',
        BUTTON_READ_STATE: 'Interface %1 button was be pushed？',
        BUTTON_READ_VALUE: 'The state value of button in interface %1',
        PIR_CATEGORY: 'PIR',
        PIR_READ_VALUE: 'Read interface %1 PIR motion sensor',
        LIGHTSENSOR_CATEGORY: 'Light',
        LIGHTSENSOR_READ_VALUE: 'read the value of light %1',
        POTSENSOR_CATEGORY: 'Pot',
        POTSENSOR_READ_VALUE: 'read the value of pot %1',
        SOUNDSENSOR_CATEGORY: 'Sound',
        SOUNDSENSOR_READ_VALUE: 'read the value of sound %1',
        ADKEYSENSOR_CATEGORY: 'ADkey',
        ADKEYSENSOR_READ_VALUE: 'Read the value of the interface %1 ADkey module',
        HC_SR04_CATEGORY: 'Ultrasonic',
        HC_SR04_READ_DISTANCE: 'HC-SR04 trig pin %1 echo pin %2 read distance %3',
        JOYSTICK_CATEGORY: 'Joystick',
        JOYSTICK_XY_VALUE: 'Read PIN %1 Joystick %2 Axis',
        KS_SERVO_CATEGORY: 'Servo',
        KS_SERVO_ANGLE: 'servo PIN#%1 channel%2 degree%3 delay%4',
        KS_SERVO_READ: 'servo PIN#%1 read degree',
        BBRGBLEDSTRIP_CATEGORY: 'RGB',
        BBRGBLEDSTRIP_INIT: 'init RGB LED length %1 pin %2',
        BBRGBLEDSTRIP_SETPIXELCOLOR: 'set pixel %1 color %2',
        BBRGBLEDSTRIP_FILL: 'fill from pixel %1 count %2 with color %3',
        BBRGBLEDSTRIP_COLOR: 'RGB LED color R %1 G %2 B %3',
        BBRGBLEDSTRIP_SETBRIGHTNESS: 'set brightness %1',
        BBRGBLEDSTRIP_CLEAR: 'clear all',
        BBRGBLEDSTRIP_SHOW: 'refresh',
        BMP388_CATEGORY: 'Barometric',
        BMP388_INIT: 'init BMP388',
        BMP388_READ: 'read BMP388',
        BMP388_SHOW_DATA: 'show data %1',
        AHT20_CATEGORY: 'Temp/Humidity',
        AHT20_READ: 'Read Temp/Humidity Sensor AHT20 %1',
        AK8975_CATEGORY: 'Compass',
        AK8975_INIT: 'Initialize AK8975 electronic compass',
        AK8975_READ: 'Read AK8975 %1 magnetic field strength',
        AK8975_DEGREE: 'Read the angle of AK8975 magnetic field direction',
        RC522_CATEGORY: 'RFID',
        RC522_INIT: 'init RFID',
        RC522_READ: 'Read the card value',
        OLED_CATEGORY: 'OLED',
        OLED_INIT: 'Init OLED',
        OLED_SETTEXT: 'set text size %1',
        OLED_SETCURSOR: 'set cursor x: %1 y: %2',
        OLED_PRINT: 'print %1 %2',
        OLED_EOL_WARP: 'warp',
        OLED_EOL_NOWARP: 'no-warp',
        OLED_IMAGE: 'oled display image%1',
        OLED_CLEAR: 'clear oled',
        OLED_REFRESH: 'refresh oled',
        WIFI_CATEGORY: 'WIFI',
        WIFI_INIT: 'wifi connect ssid:%1 password:%2',
        WIFI_READ_IP: 'WiFi read ip',
        //MODE_TEST:'mode test',
   
    });
    Object.assign(Blockly.ScratchMsgs.locales['de'], {
        KS_VARIABLE_LABEL:'Variablentyp',
        KS_variables_declare:'Deklarieren Sie %1 Variablentyp %2 Name %3 Zugewiesen an %4',
        KS_variables_set:'Variable %1 um %2 setzen',
        KS_variables_change:'Variablenmodus %1 %2 ändern',
        KS_variables_value: 'Variable %1',
        KS_variables_setString:'Setze %1 String-Variable um %2',
        KS_global:'Global',
        KS_local:'Lokal',
        KS_MATH_INT: 'int',
        KS_MATH_LONG: 'lang',
        KS_MATH_FLOAT: 'float',
        KS_MATH_BOOLEAN: 'boolean',
        KS_MATH_BYTE: 'Byte',
        KS_MATH_CHAR: 'char',
        KS_MATH_STRING: 'Zeichenfolge',
        KS_MATH_UNSIGNED_INT: 'unsigned int',
        KS_MATH_WORD: 'Wort',
        KS_MATH_UNSIGNED_LONG: 'unsigned long',
        KS_MATH_UNSIGNED_CHAR: 'unsigned char',
        KS_MATH_DOUBLE: 'double',

        KS_TEXT_LABEL:'TEXT',
        KS_char: 'char%1',
        KS_string: 'string%1',
        KS_data: '%1',

        KS_LOGIC_LABEL:'Logik',
        KS_judge:'%1 %2 %3',
        LED_CATEGORY: 'LED',
        LED_SET_LED_STATE: 'LED-Pin%1 aus%2',
        LED_ANALOG: 'LED %1 Kanal%2 AnalogWrite%3',
        ATBUZZER_CATEGORY: 'Summer',
        ATBUZZER_STATE: 'Summer-Pin%1 aus%2',
        BUZZER_CATEGORY: 'Lautsprecher',
        BUZZER_TONE_D: 'Ton-PIN#%1 Häufigkeit%2 Dauer%3',
        BUZZER_MUSIC: 'Ton PIN#%1 Musik abspielen%2',
        BUZZER_NOTONE: 'NoTone%1',
        MOTOR130_CATEGORY: 'Motor',
        MOTOR130_DIGITAL: 'Motor INA#%1 Status%2 INB#%3 Status%4',
        MOTOR130_ANALOG: 'Motor INA#%1 Status%2 INB#%3 Kanal%4 analogWrite%5',
        BUTTON_CATEGORY: 'Schaltfläche',
        BUTTON_READ_STATE: 'Schaltfläche %1 der Schnittstelle wurde gedrückt?',
        BUTTON_READ_VALUE: 'Der Statuswert der Schaltfläche in Schnittstelle %1',
        PIR_CATEGORY: 'PIR',
        PIR_READ_VALUE: 'Schnittstelle %1 PIR-Bewegungssensor lesen',
        LIGHTSENSOR_CATEGORY: 'Licht',
        LIGHTSENSOR_READ_VALUE: 'den Lichtwert %1 lesen',
        POTSENSOR_CATEGORY: 'Topf',
        POTSENSOR_READ_VALUE: 'den Wert von Pot %1 lesen',
        SOUNDSENSOR_CATEGORY: 'Ton',
        SOUNDSENSOR_READ_VALUE: 'den Wert von Sound %1 lesen',
        ADKEYSENSOR_CATEGORY: 'ADkey',
        ADKEYSENSOR_READ_VALUE: 'Lesen Sie den Wert des ADkey %1',
        HC_SR04_CATEGORY: 'Ultraschall',
        HC_SR04_READ_DISTANCE: 'HC-SR04 Trig-Pin %1 Echo-Pin %2 Leseabstand %3',
        JOYSTICK_CATEGORY: 'Joystick',
        JOYSTICK_XY_VALUE: 'PIN %1 Joystick %2 Achse lesen',
        KS_SERVO_CATEGORY: 'Servo',
        KS_SERVO_ANGLE: 'Servo PIN#%1 Kanal%2 Grad%3 Verzögerung%4',
        KS_SERVO_READ: 'Servo PIN#%1 Lesegrad',
        BBRGBLEDSTRIP_CATEGORY: 'RGB',
        BBRGBLEDSTRIP_INIT: 'RGB-LED-Länge %1 Pin %2 initialisieren',
        BBRGBLEDSTRIP_SETPIXELCOLOR: 'Pixel %1 Farbe %2 festlegen',
        BBRGBLEDSTRIP_FILL: 'Von Pixel %1 Anzahl %2 mit Farbe %3 füllen',
        BBRGBLEDSTRIP_COLOR: 'RGB-LED-Farbe R %1 G %2 B %3',
        BBRGBLEDSTRIP_SETBRIGHTNESS: 'Helligkeit %1 einstellen',
        BBRGBLEDSTRIP_CLEAR: 'Alles löschen',
        BBRGBLEDSTRIP_SHOW: 'aktualisieren',
        BMP388_CATEGORY: 'Luftdruck',
        BMP388_INIT: 'init BMP388',
        BMP388_READ: 'Read BMP388 Data',
        BMP388_SHOW_DATA: 'show data %1',
        AHT20_CATEGORY: 'Tempe/Feuchtigkeitssensor',
        AHT20_READ: 'Lese Temp/Feuchtigkeitssensor AHT20 %1',
        AK8975_CATEGORY: 'Kompass',
        AK8975_INIT: 'Elektronischen Kompass AK8975 initialisieren',
        AK8975_READ: 'AK8975 %1 Magnetfeldstärke lesen',
        AK8975_DEGREE: 'Lesen Sie den Winkel der Magnetfeldrichtung des AK8975',
        RC522_CATEGORY: 'RFID',
        RC522_INIT: 'RFID initialisieren',
        RC522_READ: 'Kartenwert lesen',
        OLED_CATEGORY: 'OLED',
        OLED_INIT: 'Init OLED',
        OLED_SETTEXT: 'Textgröße %1',
        OLED_SETCURSOR: 'Cursor x setzen: %1 y: %2',
        OLED_PRINT: 'drucken %1 %2',
        OLED_EOL_WARP: 'Warp',
        OLED_EOL_NOWARP: 'kein Warp',
        OLED_IMAGE: 'OLED-Anzeigebild%1',
        OLED_CLEAR: 'klares OLED',
        OLED_REFRESH: 'OLED aktualisieren',
        WIFI_CATEGORY: 'WIFI',
        WIFI_INIT: 'wifi connect ssid:%1 passwort:%2',
        WIFI_READ_IP: 'WiFi liest IP',
        //MODE_TEST:'mode test',
    });
    Object.assign(Blockly.ScratchMsgs.locales['es'], {
        KS_VARIABLE_LABEL:'Tipo de variable',
        KS_variables_declare:'Declarar %1 variable Tipo %2 Nombre %3 Asignado a %4',
        KS_variables_set:'Establecer %1 variable por %2',
        KS_variables_change:'Cambiar %1 modo variable %2',
        KS_variables_value: 'variable %1',
        KS_variables_setString:'Establecer %1 variable de cadena por %2',
        KS_global:'Global',
        KS_local:'Local',
        KS_MATH_INT: 'int',
        KS_MATH_LONG: 'largo',
        KS_MATH_FLOAT: 'flotante',
        KS_MATH_BOOLEAN: 'booleano',
        KS_MATH_BYTE: 'byte',
        KS_MATH_CHAR: 'carácter',
        KS_MATH_STRING: 'cadena',
        KS_MATH_UNSIGNED_INT: 'int sin firmar',
        KS_MATH_WORD: 'palabra',
        KS_MATH_UNSIGNED_LONG: 'largo sin firmar',
        KS_MATH_UNSIGNED_CHAR: 'caracter sin firmar',
        KS_MATH_DOUBLE: 'doble',

        KS_TEXT_LABEL:'TEXTO',
        KS_char: 'char%1',
        KS_string: 'cadena%1',
        KS_data: '%1',

        KS_LOGIC_LABEL:'lógica',
        KS_judge:'%1 %2 %3',
        LED_CATEGORY: 'LED',
        LED_SET_LED_STATE: 'Pin de LED%1 fuera%2',
        LED_ANALOG: 'LED %1 canal%2 escritura analógica%3',
        ATBUZZER_CATEGORY: 'Zumbador',
        ATBUZZER_STATE: 'pin de zumbador%1 fuera%2',
        BUZZER_CATEGORY: 'Altavoz',
        BUZZER_TONE_D: 'Tono PIN#%1 frecuencia%2 duración%3',
        BUZZER_MUSIC: 'Tono PIN#%1 reproducir música%2',
        BUZZER_NOTONE: 'Sin Tono%1',
        MOTOR130_CATEGORY: 'Motor',
        MOTOR130_DIGITAL: 'Motor INA#%1 Estado%2 INB#%3 Estado%4',
        MOTOR130_ANALOG: 'Motor INA#%1 Estado%2 INB#%3 canal%4 escritura analógica%5',
        BUTTON_CATEGORY: 'Botón',
        BUTTON_READ_STATE: '¿Se presionó el botón de la interfaz %1?',
        BUTTON_READ_VALUE: 'El valor de estado del botón en la interfaz %1',
        PIR_CATEGORÍA: 'PIR',
        PIR_READ_VALUE: 'Interfaz de lectura %1 sensor de movimiento PIR',
        LIGHTSENSOR_CATEGORY: 'Luz',
        LIGHTSENSOR_READ_VALUE: 'leer el valor de la luz %1',
        POTSENSOR_CATEGORY: 'Olla',
        POTSENSOR_READ_VALUE: 'leer el valor del bote %1',
        SOUNDSENSOR_CATEGORY: 'Sonido',
        SOUNDSENSOR_READ_VALUE: 'leer el valor del sonido %1',
        ADKEYSENSOR_CATEGORY: 'ADkey',
        ADKEYSENSOR_READ_VALUE: 'Leer el valor de la interfaz %1 ADkey',
        HC_SR04_CATEGORY: 'Ultrasónico',
        HC_SR04_READ_DISTANCE: 'HC-SR04 pin de activación %1 pin de eco %2 distancia de lectura %3',
        JOYSTICK_CATEGORY: 'Joystick',
        JOYSTICK_XY_VALUE: 'Leer Eje %2 del Joystick en Pin %1',
        KS_SERVO_CATEGORY: 'Servo',
        KS_SERVO_ANGLE: 'servo PIN#%1 canal%2 grado%3 retraso%4',
        KS_SERVO_READ: 'servo PIN#%1 grado de lectura',
        BBRGBLEDSTRIP_CATEGORY: 'RGB',
        BBRGBLEDSTRIP_INIT: 'iniciar longitud de LED RGB %1 pin %2',
        BBRGBLEDSTRIP_SETPIXELCOLOR: 'establecer píxel %1 color %2',
        BBRGBLEDSTRIP_FILL: 'rellenar desde el píxel %1 contar %2 con el color %3',
        BBRGBLEDSTRIP_COLOR: 'LED RGB color R %1 G %2 B %3',
        BBRGBLEDSTRIP_SETBRIGHTNESS: 'establecer brillo %1',
        BBRGBLEDSTRIP_CLEAR: 'borrar todo',
        BBRGBLEDSTRIP_SHOW: 'actualizar',
        BMP388_CATEGORY: 'Barométrica',
        BMP388_INIT: 'iniciar BMP388',
        BMP388_READ: 'leer BMP388',
        BMP388_SHOW_DATA: 'Mostrar datos %1',
        AHT20_CATEGORY: 'Temp/Humedad',
        AHT20_READ: 'Leer Sensor de Temp./Humedad AHT20 %1',
        AK8975_CATEGORY: 'Brújula electrónica AK8975',
        AK8975_INIT: 'Campo',
        AK8975_READ: 'Leer AK8975 %1 intensidad del campo magnético',
        AK8975_DEGREE: 'Leer el ángulo de dirección del campo magnético AK8975',
        RC522_CATEGORY: 'RFID',
        RC522_INIT: 'iniciar RFID',
        RC522_READ: 'Leer el valor de la tarjeta',
        CATEGORÍA_OLED: 'OLED',
        OLED_INIT: 'inicial OLED',
        OLED_SETTEXT: 'establecer tamaño de texto %1',
        OLED_SETCURSOR: 'establecer cursor x: %1 y: %2',
        OLED_PRINT: 'imprimir %1 %2',
        OLED_EOL_WARP: 'deformar',
        OLED_EOL_NOWARP: 'sin deformación',
        OLED_IMAGE: 'imagen de pantalla en formato Oled%1',
        OLED_CLEAR: 'oled claro',
        OLED_REFRESH: 'actualizar oled',
        WIFI_CATEGORÍA: 'WIFI',
        WIFI_INIT: 'wifi connect ssid:%1 contraseña:%2',
        WIFI_READ_IP: 'WiFi leer ip',
        //MODE_TEST:'mode test',
    });
    Object.assign(Blockly.ScratchMsgs.locales['fr'], {
        KS_VARIABLE_LABEL:'Type de variable',
         KS_variables_declare:'Déclarer %1 variable Type %2 Nom %3 Attribué à %4',
         KS_variables_set: 'Définir la variable %1 par %2',
         KS_variables_change:'Changer %1 mode variable %2',
         KS_variables_value: 'variable %1',
         KS_variables_setString: 'Définir la variable chaîne %1 par %2',
         KS_global:'Global',
         KS_local:'Local',
         KS_MATH_INT: 'entier',
         KS_MATH_LONG: 'long',
         KS_MATH_FLOAT: 'flottant',
         KS_MATH_BOOLEAN: 'booléen',
         KS_MATH_BYTE: 'octet',
         KS_MATH_CHAR: 'car',
         KS_MATH_STRING: 'chaîne',
         KS_MATH_UNSIGNED_INT: 'entier non signé',
         KS_MATH_WORD: 'mot',
         KS_MATH_UNSIGNED_LONG: 'long non signé',
         KS_MATH_UNSIGNED_CHAR: 'caractère non signé',
         KS_MATH_DOUBLE: 'doubler',

         KS_TEXT_LABEL:'TEXTE',
         KS_char: 'car%1',
         KS_string: 'chaîne%1',
         KS_data: '%1',

         KS_LOGIC_LABEL:'logique',
         KS_judge:'%1 %2 %3',
         LED_CATEGORY: 'DEL',
         LED_SET_LED_STATE: 'Broche LED%1 sortie%2',
         LED_ANALOG: 'LED %1 canal%2 analogWrite%3',
         ATBUZZER_CATEGORY: 'Sonnerie',
         ATBUZZER_STATE: 'broche du buzzer%1 sur%2',
         BUZZER_CATEGORY: "Haut-parleur",
         BUZZER_TONE_D: 'Tonalité PIN #%1 fréquence%2 durée%3',
         BUZZER_MUSIC: 'Tone PIN#%1 play music%2',
         BUZZER_NOTONE: 'Pas de tonalité%1',
         MOTOR130_CATEGORY:'Moteur',
         MOTOR130_DIGITAL: 'Moteur INA#%1 État%2 INB#%3 État%4',
         MOTOR130_ANALOG:'Moteur INA#%1 State%2 INB#%3 canal%4 analogWrite%5',
         BUTTON_CATEGORY: 'Bouton',
         BUTTON_READ_STATE: 'Le bouton %1 de l"interface a été enfoncé?',
         BUTTON_READ_VALUE: 'La valeur d"état du bouton dans l"interface %1',
         PIR_CATEGORY: 'PIR',
         PIR_READ_VALUE: 'Lire l"interface %1 du capteur de mouvement PIR',
         LIGHTSENSOR_CATEGORY: "Lumière",
         LIGHTSENSOR_READ_VALUE: 'Lire la valeur de la lumière %1',
         POTSENSOR_CATEGORY: 'Pot',
         POTSENSOR_READ_VALUE: 'lire la valeur du pot %1',
         SOUNDSENSOR_CATEGORY: "Son",
         SOUNDSENSOR_READ_VALUE: 'lire la valeur du son %1',
         ADKEYSENSOR_CATEGORY: 'ADkey',
         ADKEYSENSOR_READ_VALUE: 'Lire la valeur du ADkey de l"interface %1',
         HC_SR04_CATEGORY: 'Ultrasons',
         HC_SR04_READ_DISTANCE: 'broche de déclenchement HC-SR04 %1 broche d"écho %2 distance de lecture %3',
         JOYSTICK_CATEGORY: 'Module de Joystick',
         JOYSTICK_XY_VALUE: 'Lire Axe %2 du Joystick sur la broche %1',
         KS_SERVO_CATEGORY: 'Servo',
         KS_SERVO_ANGLE: 'code PIN servo#%1 canal%2 degré%3 retard%4',
         KS_SERVO_READ: 'servo PIN #%1 degré de lecture',
         BBRGBLEDSTRIP_CATEGORY: 'RVB ',
         BBRGBLEDSTRIP_INIT: 'initialisation de la longueur de la LED RVB %1 broche %2',
         BBRGBLEDSTRIP_SETPIXELCOLOR: 'définir le pixel %1 couleur %2',
         BBRGBLEDSTRIP_FILL: 'remplir à partir du pixel %1 compter %2 avec la couleur %3',
         BBRGBLEDSTRIP_COLOR: 'Couleur LED RVB R %1 G %2 B %3',
         BBRGBLEDSTRIP_SETBRIGHTNESS: 'définir la luminosité %1',
         BBRGBLEDSTRIP_CLEAR: 'tout effacer',
         BBRGBLEDSTRIP_SHOW: 'actualiser',
         BMP388_CATEGORY: 'Barométrique',
         BMP388_INIT: 'init BMP388',
         BMP388_READ: 'lire BMP388',
         BMP388_SHOW_DATA: 'Afficher les données %1',
         AHT20_CATEGORY: 'Temp/Humidité',
         AHT20_READ: 'Lire Capteur de Temp./Humidité AHT20 %1',
         AK8975_CATEGORY: 'Boussole',
         AK8975_INIT: 'Initialiser la boussole électronique AK8975',
         AK8975_READ: 'Lire l"intensité du champ magnétique AK8975 %1',
         AK8975_DEGREE: 'Lire l"angle de la direction du champ magnétique AK8975',
         RC522_CATEGORY: 'RFID',
         RC522_INIT : 'init RFID',
         RC522_READ: 'Lire la valeur de la carte',
         OLED_CATEGORY: 'OLED',
         OLED_INIT: 'Init OLED',
         OLED_SETTEXT: 'définir la taille du texte %1',
         OLED_SETCURSOR: 'définir le curseur x: %1 y: %2',
         OLED_PRINT: 'imprimer %1 %2',
         OLED_EOL_WARP: 'déformation',
         OLED_EOL_NOWARP: 'sans déformation',
         OLED_IMAGE: 'image d"affichage oled%1',
         OLED_CLEAR: 'effacer l"oled',
         OLED_REFRESH: 'rafraîchir oled',
         WIFI_CATEGORY: 'WIFI',
         WIFI_INIT: 'ssid de connexion wifi:%1 mot de passe:%2',
         WIFI_READ_IP: 'IP de lecture WiFi',
         //MODE_TEST:'mode test',
    });
    Object.assign(Blockly.ScratchMsgs.locales['ja'], {
        KS_VARIABLE_LABEL:'変数タイプ',
         KS_variables_declare:'%1 変数を宣言します。タイプ %2 名前 %3 を %4 に割り当てます',
         KS_variables_set:'%1 変数を %2 で設定',
         KS_variables_change:'%1 変数モード %2 を変更',
         KS_variables_value: '変数 %1',
         KS_variables_setString:'%1 文字列変数を %2 で設定',
         KS_global:'グローバル',
         KS_local:'ローカル',
         KS_MATH_INT: 'int',
         KS_MATH_LONG: '長い',
         KS_MATH_FLOAT: '浮動小数点',
         KS_MATH_BOOLEAN: 'ブール値',
         KS_MATH_BYTE: 'バイト',
         KS_MATH_CHAR: '文字',
         KS_MATH_STRING: '文字列',
         KS_MATH_UNSIGNED_INT: '符号なし整数',
         KS_MATH_WORD: '単語',
         KS_MATH_UNSIGNED_LONG: '符号なしロング',
         KS_MATH_UNSIGNED_CHAR: '符号なし文字',
         KS_MATH_DOUBLE: '倍精度',

         KS_TEXT_LABEL:'テキスト',
         KS_char: 'char%1',
         KS_string: 'string%1',
         KS_data: '%1',

         KS_LOGIC_LABEL:'ロジック',
         KS_judge:'%1 %2 %3',
         LED_CATEGORY: 'LED',
         LED_SET_LED_STATE: 'LED ピン %1 出力 %2',
         LED_ANALOG: 'LED %1 チャネル%2 アナログ書き込み%3',
         ATBUZZER_CATEGORY: 'ブザー',
         ATBUZZER_STATE: 'ブザーピン%1 出力%2',
         BUZZER_CATEGORY: 'スピーカー',
         BUZZER_TONE_D: 'トーン PIN#%1 頻度%2 期間%3',
         BUZZER_MUSIC: 'トーン PIN#%1 音楽%2 を再生',
         BUZZER_NOTONE: 'NoTone%1',
         MOTOR130_CATEGORY: 'モーター',
         MOTOR130_DIGITAL: 'モーター INA#%1 状態%2 INB#%3 状態%4',
         MOTOR130_ANALOG: 'モーター INA#%1 状態%2 INB#%3 チャネル%4 アナログ書き込み%5',
         BUTTON_CATEGORY: 'ボタン',
         BUTTON_READ_STATE: 'インターフェイス %1 ボタンが押されました?',
         BUTTON_READ_VALUE: 'インターフェイス %1 のボタンの状態値',
         PIR_CATEGORY: 'PIR',
         PIR_READ_VALUE: 'インターフェイス %1 PIR モーション センサーを読み取り',
         LIGHTSENSOR_CATEGORY: 'ライト',
         LIGHTSENSOR_READ_VALUE: 'ライト %1 の値を読み取ります',
         POTSENSOR_CATEGORY: 'ポット',
         POTSENSOR_READ_VALUE: 'ポット %1 の値を読み取ります',
         SOUNDSENSOR_CATEGORY: 'サウンド',
         SOUNDSENSOR_READ_VALUE: 'サウンド %1 の値を読み取ります',
         ADKEYSENSOR_CATEGORY: 'ADkey',
         ADKEYSENSOR_READ_VALUE: 'インターフェイス %1 ADkeyの値を読み取ります',
         HC_SR04_CATEGORY: '超音波',
         HC_SR04_READ_DISTANCE: 'HC-SR04 トリガー ピン %1 エコー ピン %2 読み取り距離 %3',
         JOYSTICK_CATEGORY: 'ジョイスティックモジュール',
         JOYSTICK_XY_VALUE: 'ピン %1 のジョイスティック %2 軸を読む',
         KS_SERVO_CATEGORY: 'サーボ',
         KS_SERVO_ANGLE: 'サーボ PIN#%1 チャネル%2 度%3 遅延%4',
         KS_SERVO_READ: 'サーボPIN#%1読み取り度',
         BBRGBLEDSTRIP_CATEGORY: 'RGB',
         BBRGBLEDSTRIP_INIT: 'RGB LED 長さ %1 ピン %2 を初期化',
         BBRGBLEDSTRIP_SETPIXELCOLOR: 'ピクセル %1 カラー %2 を設定',
         BBRGBLEDSTRIP_FILL: 'ピクセル %1 カウント %2 から色 %3 で塗りつぶします',
         BBRGBLEDSTRIP_COLOR: 'RGB LED カラー R %1 G %2 B %3',
         BBRGBLEDSTRIP_SETBRIGHTNESS: '明るさを設定 %1',
         BBRGBLEDSTRIP_CLEAR: 'すべてクリア',
         BBRGBLEDSTRIP_SHOW: '更新',
         BMP388_CATEGORY: '気圧',
         BMP388_INIT: 'BMP388 の初期化',
         BMP388_READ: 'BMP388 を読み取り',
         BMP388_SHOW_DATA: 'データの表示 %1',
         AHT20_CATEGORY: '温湿度',
         AHT20_READ: '温湿度センサーAHT20読み取り %1',
         AK8975_CATEGORY: '電子コンパス',
         AK8975_INIT: 'AK8975電子コンパスの初期化',
         AK8975_READ: 'AK8975 %1 磁界強度を読み取る',
         AK8975_DEGREE: 'AK8975の磁界方向の角度を読み取る',
         RC522_CATEGORY: 'RFID',
         RC522_INIT: 'RFID の初期化',
         RC522_READ: 'カード値を読み取ります',
         OLED_CATEGORY: 'OLED',
         OLED_INIT: '初期化 OLED',
         OLED_SETTEXT: 'テキスト サイズ %1',
         OLED_SETCURSOR: 'カーソル x: %1 y: %2 を設定します',
         OLED_PRINT: '印刷 %1 %2',
         OLED_EOL_WARP: 'ワープ',
         OLED_EOL_NOWARP: 'ワープなし',
         OLED_IMAGE: 'OLED ディスプレイ画像 %1',
         OLED_CLEAR: 'OLED をクリア',
         OLED_REFRESH: 'OLEDをリフレッシュ',
         WIFI_CATEGORY: 'WIFI',
         WIFI_INIT: 'WiFi 接続 ssid:%1 パスワード:%2',
         WIFI_READ_IP: 'WiFi 読み取り IP',
         //MODE_TEST:'mode test',
    });
    Object.assign(Blockly.ScratchMsgs.locales['ko'], {
        KS_VARIABLE_LABEL:'변수 유형',
         KS_variables_declare:'%1 변수 유형 %2 이름 %3 선언 %4에 할당됨',
         KS_variables_set:'%1 변수를 %2로 설정',
         KS_variables_change:'%1 변수 모드 %2 변경',
         KS_variables_value: '변수 %1',
         KS_variables_setString:'%1 문자열 변수를 %2로 설정',
         KS_global:'글로벌',
         KS_local:'로컬',
         KS_MATH_INT: '정수',
         KS_MATH_LONG: '긴',
         KS_MATH_FLOAT: '부동',
         KS_MATH_BOOLEAN: '부울',
         KS_MATH_BYTE: '바이트',
         KS_MATH_CHAR: '문자',
         KS_MATH_STRING: '문자열',
         KS_MATH_UNSIGNED_INT: '부호 없는 정수',
         KS_MATH_WORD: '단어',
         KS_MATH_UNSIGNED_LONG: '부호 없는 롱',
         KS_MATH_UNSIGNED_CHAR: '부호 없는 문자',
         KS_MATH_DOUBLE: '더블',

         KS_TEXT_LABEL:'텍스트',
         KS_char: '문자%1',
         KS_string: '문자열%1',
         KS_data: '%1',

         KS_LOGIC_LABEL:'논리',
         KS_judge:'%1 %2 %3',
         LED_CATEGORY: 'LED',
         LED_SET_LED_STATE: 'LED 핀%1 아웃%2',
         LED_ANALOG: 'LED %1 채널%2 analogWrite%3',
         ATBUZZER_CATEGORY: '버저',
         ATBUZZER_STATE: '부저 핀%1 출력%2',
         BUZZER_CATEGORY: '스피커',
         BUZZER_TONE_D: 'Tone PIN#%1 주파수%2 지속시간%3',
         BUZZER_MUSIC: 'Tone PIN#%1 음악 재생%2',
         BUZZER_NOTONE: '노톤%1',
         MOTOR130_CATEGORY: '모터',
         MOTOR130_DIGITAL: '모터 INA#%1 상태%2 INB#%3 상태%4',
         MOTOR130_ANALOG: '모터 INA#%1 상태%2 INB#%3 채널%4 아날로그쓰기%5',
         BUTTON_CATEGORY: '버튼',
         BUTTON_READ_STATE: '인터페이스 %1 버튼이 눌렸습니까?',
         BUTTON_READ_VALUE: '인터페이스 %1에 있는 버튼의 상태 값',
         PIR_CATEGORY: '피르',
         PIR_READ_VALUE: '인터페이스 %1 읽기 PIR 모션 센서',
         LIGHTSENSOR_CATEGORY: '조명',
         LIGHTSENSOR_READ_VALUE: '라이트 %1의 값 읽기',
         POTSENSOR_CATEGORY: '냄비',
         POTSENSOR_READ_VALUE: '팟 %1의 값 읽기',
         SOUNDSENSOR_CATEGORY: '소리',
         SOUNDSENSOR_READ_VALUE: '%1 사운드 값 읽기',
         ADKEYSENSOR_CATEGORY: 'ADkey',
         ADKEYSENSOR_READ_VALUE: '인터페이스 %1 ADkey값을 읽습니다.',
         HC_SR04_CATEGORY: '초음파',
         HC_SR04_READ_DISTANCE: 'HC-SR04 트리거 핀 %1 에코 핀 %2 읽기 거리 %3',
         JOYSTICK_CATEGORY: '조이스틱 모듈',
         JOYSTICK_XY_VALUE: '핀 %1의 조이스틱 %2 축 읽기',
         KS_SERVO_CATEGORY: '서보',
         KS_SERVO_ANGLE: '서보 PIN#%1 채널%2 정도%3 지연%4',
         KS_SERVO_READ: '서보 PIN#%1 읽기 정도',
         BBRGBLEDSTRIP_CATEGORY: 'RGB',
         BBRGBLEDSTRIP_INIT: '초기화 RGB LED 길이 %1 핀 %2',
         BBRGBLEDSTRIP_SETPIXELCOLOR: '픽셀 %1 색상 %2 설정',
         BBRGBLEDSTRIP_FILL: '색상 %3로 픽셀 %1 카운트 %2에서 채우기',
         BBRGBLEDSTRIP_COLOR: 'RGB LED 색상 R %1 G %2 B %3',
         BBRGBLEDSTRIP_SETBRIGHTNESS: '밝기 %1 설정',
         BBRGBLEDSTRIP_CLEAR: '모두 지우기',
         BBRGBLEDSTRIP_SHOW: '새로 고침',
         BMP388_CATEGORY: '기압',
         BMP388_INIT: 'BMP388 초기화',
         BMP388_READ: 'BMP388 읽기',
         BMP388_SHOW_DATA: '데이터 표시 %1',
         AHT20_CATEGORY: '온습도 센서',
         AHT20_READ: '온습도 센서 AHT20 읽기 %1',
         AK8975_CATEGORY: '전자 나침반',
         AK8975_INIT: 'AK8975 전자 나침반 초기화',
         AK8975_READ: 'AK8975 %1 자기장 강도 읽기',
         AK8975_DEGREE: 'AK8975 자기장 방향의 각도 읽기',
         RC522_CATEGORY: 'RFID',
         RC522_INIT: '초기화 RFID',
         RC522_READ: '카드 값 읽기',
         OLED_CATEGORY: 'OLED',
         OLED_INIT: '초기화 OLED',
         OLED_SETTEXT: '텍스트 크기 %1',
         OLED_SETCURSOR: '커서 설정 x: %1 y: %2',
         OLED_PRINT: '%1 %2 인쇄',
         OLED_EOL_WARP: '워프',
         OLED_EOL_NOWARP: '뒤틀림 없음',
         OLED_IMAGE: 'oled 디스플레이 이미지%1',
         OLED_CLEAR: '맑은 OLED',
         OLED_REFRESH: '올레드 새로고침',
         WIFI_CATEGORY: '와이파이',
         WIFI_INIT: 'wifi 연결 ssid:%1 비밀번호:%2',
         WIFI_READ_IP: 'WiFi 읽기 IP',
         //MODE_TEST:'mode test',
    });
    Object.assign(Blockly.ScratchMsgs.locales['pl'], {
        KS_VARIABLE_LABEL:'Typ zmiennej',
        KS_variables_declare:'Deklaracja %1 zmiennej Typ %2 Nazwa %3 Przypisana do %4',
        KS_variables_set:'Ustaw zmienną %1 na %2',
        KS_variables_change:'Zmień tryb zmiennej %1 %2',
        KS_variables_value: 'zmienna %1',
        KS_variables_setString:'Ustaw zmienną łańcuchową %1 o %2',
        KS_global:'Globalny',
        KS_local:'Lokalny',
        KS_MATH_INT: 'int',
        KS_MATH_LONG: 'długi',
        KS_MATH_FLOAT: 'pływa',
        KS_MATH_BOOLEAN: 'wartość logiczna',
        KS_MATH_BYTE: 'bajt',
        KS_MATH_CHAR: 'znak',
        KS_MATH_STRING: 'ciąg znaków',
        KS_MATH_UNSIGNED_INT: 'bez znaku int',
        KS_MATH_WORD: 'słowo',
        KS_MATH_UNSIGNED_LONG: 'długi bez znaku',
        KS_MATH_UNSIGNED_CHAR: 'znak bez znaku',
        KS_MATH_DOUBLE: 'podwójne',

        KS_TEXT_LABEL:'TEKST',
        KS_char: 'znak%1',
        KS_string: 'ciąg%1',
        KS_data: '%1',

        KS_LOGIC_LABEL:'logika',
        KS_judge:'%1%2%3',
        LED_CATEGORY: 'LED',
        LED_SET_LED_STATE: 'LED pin%1 out%2',
        LED_ANALOG: 'LED %1 kanał%2 analogWrite%3',
        ATBUZZER_CATEGORY: 'Brzęczyk',
        ATBUZZER_STATE: 'pin brzęczyka%1 out%2',
        BUZZER_CATEGORY: 'Mówca',
        BUZZER_TONE_D: 'Ton PIN#%1 częstotliwość%2 czas trwania%3',
        BUZZER_MUSIC: 'Ton PIN#%1 odtwarzanie muzyki%2',
        BUZZER_NOTONE: 'NoTone%1',
        MOTOR130_CATEGORY: 'Silnik prądu stałego',
        MOTOR130_DIGITAL: 'silnikaINA#%1 Stan%2 INB#%3 Stan%4',
        MOTOR130_ANALOG: 'silnika INA#%1 Stan%2 INB#%3 kanał%4 analogWrite%5',
        BUTTON_CATEGORY: 'Przycisk',
        BUTTON_READ_STATE: 'Naciśnięto przycisk %1 interfejsu?',
        BUTTON_READ_VALUE: 'Wartość stanu przycisku w interfejsie %1',
        PIR_CATEGORY: 'PIR',
        PIR_READ_VALUE: 'Odczyt interfejsu %1 czujnika ruchu PIR',
        LIGHTSENSOR_CATEGORY: 'Światło',
        LIGHTSENSOR_READ_VALUE: 'odczytaj wartość światła %1',
        POTSENSOR_CATEGORY: 'Doniczka',
        POTSENSOR_READ_VALUE: 'odczytaj wartość puli %1',
        SOUNDSENSOR_CATEGORY: 'Dźwięk',
        SOUNDSENSOR_READ_VALUE: 'odczytaj wartość dźwięku %1',
        ADKEYSENSOR_CATEGORY: 'ADkey',
        ADKEYSENSOR_READ_VALUE: 'Odczytaj wartość ADkey interfejsu %1',
        HC_SR04_CATEGORY: 'Ultradźwięki',
        HC_SR04_READ_DISTANCE: 'HC-SR04 pin wyzwalający %1 pin echa %2 odległość odczytu %3',
        JOYSTICK_CATEGORY: 'Moduł joysticka',
        JOYSTICK_XY_VALUE: 'Odczyt osi %2 joysticka na pinie %1',
        KS_SERVO_CATEGORY: 'Serwo',
        KS_SERVO_ANGLE: 'serwo PIN#%1 kanał%2 stopień%3 opóźnienie%4',
        KS_SERVO_READ: 'serwo PIN#%1 stopień odczytu',
        BBRGBLEDSTRIP_CATEGORY: 'LED RGB',
        BBRGBLEDSTRIP_INIT: 'początkowa długość diody LED RGB %1 pin %2',
        BBRGBLEDSTRIP_SETPIXELCOLOR: 'ustaw piksel %1 kolor %2',
        BBRGBLEDSTRIP_FILL: 'wypełnij piksel %1 liczba %2 kolorem %3',
        BBRGBLEDSTRIP_COLOR: 'Kolor LED RGB R %1 G %2 B %3',
        BBRGBLEDSTRIP_SETBRIGHTNESS: 'ustaw jasność %1',
        BBRGBLEDSTRIP_CLEAR: 'wyczyść wszystko',
        BBRGBLEDSTRIP_SHOW: 'odśwież',
        BMP388_CATEGORY: 'Ciśnienie barometryczne',
        BMP388_INIT: 'zainicjuj BMP388',
        BMP388_READ: 'odczytaj BMP388',
        BMP388_SHOW_DATA: 'Wyświetlaj dane %1',
        AHT20_CATEGORY: 'Czujnik Temperatury i Wilgotności',
        AHT20_READ: 'Odczyt Czujnika Temp./Wilgotności AHT20 %1',
        AK8975_CATEGORY: 'Kompas elektroniczny AK8975',
        AK8975_INIT: 'Zainicjuj kompas elektroniczny AK8975',
        AK8975_READ: 'Przeczytaj AK8975 %1 natężenie pola magnetycznego',
        AK8975_DEGREE: 'Odczytaj kąt kierunku pola magnetycznego AK8975',
        RC522_CATEGORY: 'RFID',
        RC522_INIT: 'rozpocznij RFID',
        RC522_READ: 'Odczytaj wartość karty',
        OLED_CATEGORY: 'OLED',
        OLED_INIT: 'początkowa OLED',
        OLED_SETTEXT: 'ustaw rozmiar tekstu %1',
        OLED_SETCURSOR: 'ustaw kursor x: %1 y: %2',
        OLED_PRINT: 'drukuj %1 %2',
        OLED_EOL_WARP: 'wypaczenie',
        OLED_EOL_NOWARP: 'bez zniekształceń',
        OLED_IMAGE: 'obraz wyświetlacza oled%1',
        OLED_CLEAR: 'wyczyść oled',
        OLED_REFRESH: 'odśwież oled',
        WIFI_CATEGORY: 'WIFI',
        WIFI_INIT: 'identyfikator SSID połączenia Wi-Fi:%1 hasło:%2',
        WIFI_READ_IP: 'Odczyt IP Wi-Fi',
        //MODE_TEST:'mode test',
    });
    Object.assign(Blockly.ScratchMsgs.locales['pt'], {
        KS_VARIABLE_LABEL:'Tipo de variável',
         KS_variables_declare:'Declare %1 variável Tipo %2 Nome %3 Atribuído a %4',
         KS_variables_set:'Definir %1 variável por %2',
         KS_variables_change:'Alterar %1 modo de variável %2',
         KS_variables_value: 'variável %1',
         KS_variables_setString:'Definir variável de string %1 por %2',
         KS_global:'Global',
         KS_local:'Local',
         KS_MATH_INT: 'int',
         KS_MATH_LONG: 'longo',
         KS_MATH_FLOAT: 'flutuar',
         KS_MATH_BOOLEAN: 'booleano',
         KS_MATH_BYTE: 'byte',
         KS_MATH_CHAR: 'char',
         KS_MATH_STRING: 'string',
         KS_MATH_UNSIGNED_INT: 'int unsigned',
         KS_MATH_WORD: 'palavra',
         KS_MATH_UNSIGNED_LONG: 'não assinado longo',
         KS_MATH_UNSIGNED_CHAR: 'caractere não assinado',
         KS_MATH_DOUBLE: 'duplo',

         KS_TEXT_LABEL:'TEXT',
         KS_char: 'char%1',
         KS_string: 'string%1',
         KS_data: '%1',

         KS_LOGIC_LABEL:'lógica',
         KS_judge:'%1 %2 %3',
         LED_CATEGORY: 'LED',
         LED_SET_LED_STATE: 'LED pino%1 fora%2',
         LED_ANALOG: 'LED %1 canal%2 analogWrite%3',
         ATBUZZER_CATEGORY: 'Campainha',
         ATBUZZER_STATE: 'pino da campainha%1 fora%2',
         BUZZER_CATEGORY: 'Alto-falante',
         BUZZER_TONE_D: 'Tom PIN#%1 frequência%2 duração%3',
         BUZZER_MUSIC: 'Tone PIN#%1 toca música%2',
         BUZZER_NOTONE: 'NoTone%1',
         MOTOR130_CATEGORY: 'Motor CC',
         MOTOR130_DIGITAL: 'Motor INA#%1 Estado%2 INB#%3 Estado%4',
         MOTOR130_ANALOG: 'Motor INA#%1 Estado%2 INB#%3 canal%4 analogWrite%5',
         BUTTON_CATEGORY: 'Botão',
         BUTTON_READ_STATE: 'O botão %1 da interface foi pressionado?',
         BUTTON_READ_VALUE: 'O valor do estado do botão na interface %1',
         PIR_CATEGORY: 'PIR',
         PIR_READ_VALUE: 'Ler interface %1 sensor de movimento PIR',
         LIGHTSENSOR_CATEGORY: 'Luz',
         LIGHTSENSOR_READ_VALUE: 'leia o valor da luz %1',
         POTSENSOR_CATEGORY: 'Pote',
         POTSENSOR_READ_VALUE: 'ler o valor do pote %1',
         SOUNDSENSOR_CATEGORY: 'Som',
         SOUNDSENSOR_READ_VALUE: 'leia o valor do som %1',
         ADKEYSENSOR_CATEGORY: 'ADkey',
         ADKEYSENSOR_READ_VALUE: 'Odczytaj wartość ADkey interfejsu %1',
         HC_SR04_CATEGORY: 'Ultrassônico',
         HC_SR04_READ_DISTANCE: 'HC-SR04 pino de ativação %1 pino de eco %2 distância de leitura %3',
         JOYSTICK_CATEGORY: 'Módulo de Joystick',
         JOYSTICK_XY_VALUE: 'Ler Eixo %2 do Joystick no Pino %1',
         KS_SERVO_CATEGORY: 'Servo',
         KS_SERVO_ANGLE: 'servo PIN#%1 canal%2 graus%3 atraso%4',
         KS_SERVO_READ: 'PIN do servo#%1 grau de leitura',
         BBRGBLEDSTRIP_CATEGORY: 'LED RGB ',
         BBRGBLEDSTRIP_INIT: 'inicializar comprimento do LED RGB %1 pino %2',
         BBRGBLEDSTRIP_SETPIXELCOLOR: 'definir pixel %1 cor %2',
         BBRGBLEDSTRIP_FILL: 'preencher do pixel %1 contagem %2 com a cor %3',
         BBRGBLEDSTRIP_COLOR: 'RGB LED cor R %1 G %2 B %3',
         BBRGBLEDSTRIP_SETBRIGHTNESS: 'definir brilho %1',
         BBRGBLEDSTRIP_CLEAR: 'limpar tudo',
         BBRGBLEDSTRIP_SHOW: 'atualizar',
         BMP388_CATEGORY: 'Pressão Barométrica',
         BMP388_INIT: 'iniciar BMP388',
         BMP388_READ: 'ler BMP388',
         BMP388_SHOW_DATA: 'Mostrar os dados %1',
         AHT20_CATEGORY: 'Sensor de Temperatura e Umidade',
         AHT20_READ: 'Ler Sensor de Temp./Umidade AHT20 %1',
         AK8975_CATEGORY: 'bússola eletrônica AK8975',
         AK8975_INIT: 'Inicializar bússola eletrônica AK8975',
         AK8975_READ: 'Ler AK8975 %1 intensidade do campo magnético',
         AK8975_DEGREE: 'Ler o ângulo da direção do campo magnético AK8975',
         RC522_CATEGORY: 'RFID',
         RC522_INIT: 'inicializar RFID',
         RC522_READ: 'Ler o valor do cartão',
         OLED_CATEGORY: 'OLED',
         OLED_INIT: 'inicial OLED',
         OLED_SETTEXT: 'definir tamanho do texto %1',
         OLED_SETCURSOR: 'definir cursor x: %1 y: %2',
         OLED_PRINT: 'imprimir %1 %2',
         OLED_EOL_WARP: 'deformar',
         OLED_EOL_NOWARP: 'sem distorção',
         OLED_IMAGE: 'imagem de exibição oled%1',
         OLED_CLEAR: 'claro oled',
         OLED_REFRESH: 'atualizar oled',
         WIFI_CATEGORY: 'WIFI',
         WIFI_INIT: 'wifi connect ssid:%1 senha:%2',
         WIFI_READ_IP: 'WiFi read ip',
         //MODE_TEST:'mode test',
    });
    Object.assign(Blockly.ScratchMsgs.locales['ru'], {
        KS_VARIABLE_LABEL: 'Тип переменной',
         KS_variables_declare:'Объявить переменную %1 Тип %2 Имя %3 Назначено %4',
         KS_variables_set:'Установить переменную %1 на %2',
         KS_variables_change:'Изменить режим переменной %1 %2',
         KS_variables_value: 'переменная %1',
         KS_variables_setString:'Установить %1 строковую переменную на %2',
         KS_global: 'Глобальный',
         KS_local: 'Местный',
         KS_MATH_INT: 'целое',
         KS_MATH_LONG: 'длинный',
         KS_MATH_FLOAT: 'плавающая',
         KS_MATH_BOOLEAN: 'логическое значение',
         KS_MATH_BYTE: 'байт',
         KS_MATH_CHAR: 'символ',
         KS_MATH_STRING: 'строка',
         KS_MATH_UNSIGNED_INT: 'целое число без знака',
         KS_MATH_WORD: 'слово',
         KS_MATH_UNSIGNED_LONG: 'длинное без знака',
         KS_MATH_UNSIGNED_CHAR: 'беззнаковый символ',
         KS_MATH_DOUBLE: 'двойной',

         KS_TEXT_LABEL:'ТЕКСТ',
         KS_char: 'символ%1',
         KS_string: 'строка%1',
         KS_data: '%1',

         KS_LOGIC_LABEL: 'логика',
         KS_judge:'%1 %2 %3',
         LED_CATEGORY: 'LED',
         LED_SET_LED_STATE: 'LED pin%1 out%2',
         LED_ANALOG: 'Индикатор %1, канал %2, аналоговая запись%3',
         ATBUZZER_CATEGORY: 'Зуммер',
         ATBUZZER_STATE: 'вывод зуммера%1 из%2',
         BUZZER_CATEGORY: "Динамик",
         BUZZER_TONE_D: 'Тональный PIN-код #%1, частота%2, продолжительность%3',
         BUZZER_MUSIC: 'Тон PIN#%1 для воспроизведения музыки%2',
         BUZZER_NOTONE: 'NoTone%1',
         MOTOR130_CATEGORY: 'Двигатель постоянного тока',
         MOTOR130_DIGITAL: 'Двигатель INA#%1 Состояние%2 INB#%3 Состояние%4',
         MOTOR130_ANALOG: 'Двигатель INA#%1 Состояние%2 INB#%3 канал%4 аналоговая запись%5',
         BUTTON_CATEGORY: "Кнопка",
         BUTTON_READ_STATE: 'Кнопка интерфейса %1 была нажата？',
         BUTTON_READ_VALUE: 'Значение состояния кнопки в интерфейсе %1',
         PIR_CATEGORY: "ПИР",
         PIR_READ_VALUE: 'Чтение интерфейса %1 PIR датчика движения',
         LIGHTSENSOR_CATEGORY: 'Свет',
         LIGHTSENSOR_READ_VALUE: 'прочитать значение света %1',
         POTSENSOR_CATEGORY: "Горшок",
         POTSENSOR_READ_VALUE: 'прочитать значение горшка %1',
         SOUNDSENSOR_CATEGORY: 'Звук',
         SOUNDSENSOR_READ_VALUE: 'прочитать значение звука %1',
         ADKEYSENSOR_CATEGORY: 'ADkey',
         ADKEYSENSOR_READ_VALUE: 'Lê o valor do ADkey da interface %1',
         HC_SR04_CATEGORY: 'Ультразвук',
         HC_SR04_READ_DISTANCE: 'HC-SR04 триггерный вывод %1 эхо-вывод %2 расстояние чтения %3',
         JOYSTICK_CATEGORY: 'Модуль джойстика',
         JOYSTICK_XY_VALUE: 'Чтение оси %2 джойстика на пине %1',
         KS_SERVO_CATEGORY: 'Сервопривод',
         KS_SERVO_ANGLE: 'ПИН-код сервопривода №%1 канал%2 градус%3 задержка%4',
         KS_SERVO_READ: 'сервопривод PIN#%1 степень чтения',
         BBRGBLEDSTRIP_CATEGORY: 'Светодиод RGB',
         BBRGBLEDSTRIP_INIT: 'инициализировать длину светодиода RGB %1 контакт %2',
         BBRGBLEDSTRIP_SETPIXELCOLOR: 'установить для пикселя %1 цвет %2',
         BBRGBLEDSTRIP_FILL: 'залить от пикселя %1 отсчета %2 цветом %3',
         BBRGBLEDSTRIP_COLOR: 'Цвет светодиода RGB R %1 G %2 B %3',
         BBRGBLEDSTRIP_SETBRIGHTNESS: 'установить яркость%1',
         BBRGBLEDSTRIP_CLEAR: 'очистить все',
         BBRGBLEDSTRIP_SHOW: 'обновить',
         BMP388_CATEGORY: 'Атмосферное давление',
         BMP388_INIT: 'инициализировать BMP388',
         BMP388_READ: 'прочитать BMP388',
         BMP388_SHOW_DATA: 'Показать данные %1',
         AHT20_CATEGORY: 'Датчик температуры и влажности',
         AHT20_READ: 'Чтение датчика темп./влажности AHT20 %1',
         AK8975_CATEGORY: 'Электронный компас AK8975',
         AK8975_INIT: 'Инициализировать электронный компас AK8975',
         AK8975_READ: 'Читать AK8975 %1 напряженность магнитного поля',
         AK8975_DEGREE: 'Читать угол направления магнитного поля AK8975',
         RC522_CATEGORY: 'RFID',
         RC522_INIT: 'инициировать RFID',
         RC522_READ: 'Прочитать стоимость карты',
         OLED_CATEGORY: "OLED",
         OLED_INIT: 'начальная OLED',
         OLED_SETTEXT: 'установить размер текста %1',
         OLED_SETCURSOR: 'установить курсор x: %1 y: %2',
         OLED_PRINT: 'напечатать %1 %2',
         OLED_EOL_WARP: 'деформация',
         OLED_EOL_NOWARP: 'без деформации',
         OLED_IMAGE: 'OLED-дисплей %1',
         OLED_CLEAR: 'очистить oled',
         OLED_REFRESH: 'обновить OLED',
         WIFI_CATEGORY: "WI-FI",
         WIFI_INIT: 'ssid для подключения к Wi-Fi:%1, пароль:%2',
         WIFI_READ_IP: 'IP-адрес чтения WiFi',
         //MODE_TEST:'mode test',
    });
    Object.assign(Blockly.ScratchMsgs.locales['zh-tw'], {
        KS_VARIABLE_LABEL:'變量類型',
        KS_variables_declare:'聲明 %1 數字變量 類型 %2 名稱 %3 賦值為 %4',
        KS_variables_declare2:'聲明 %1 字符串變量 類型 %2 名稱 %3 賦值為 %4',
        KS_variables_set:'設置 %1 變量 為 %2',
        KS_variables_change:'設置 %1 變量 模式 %2',
        KS_variables_value: '變量 %1',
        KS_variables_setString:'設置 %1 字符串變量 為 %2',
        KS_global:'全局',
        KS_local:'局部',
        KS_MATH_INT: '整數',
        KS_MATH_LONG: '長整數',
        KS_MATH_FLOAT: '小數',
        KS_MATH_BOOLEAN: '布爾',
        KS_MATH_BYTE: '字節',
        KS_MATH_CHAR: '字符',
        KS_MATH_STRING: '字符串',
        KS_MATH_UNSIGNED_INT: '無符號整數',
        KS_MATH_WORD: '字',
        KS_MATH_UNSIGNED_LONG: '無符號長整數',
        KS_MATH_UNSIGNED_CHAR: '無符號字符',
        KS_MATH_DOUBLE: '雙精度浮點數',

        KS_TEXT_LABEL:'文本',
        KS_char: '\'%1\'',
        KS_string: '\"%1\"',
        KS_data: '%1',

        KS_LOGIC_LABEL:'邏輯',
        KS_judge:'%1 %2 %3',
        LED_CATEGORY: 'LED',
        LED_SET_LED_STATE: 'LED 接口%1 輸出%2 ',
        LED_ANALOG: 'LED燈 %1 通道%2 模擬輸出%3',
        BUZZER_CATEGORY: '揚聲器',
        BUZZER_TONE_D: '播放聲音 引腳%1 頻率%2 節拍%3',
        BUZZER_MUSIC: '揚聲器 引腳%1 播放音樂%2',
        BUZZER_NOTONE: '結束聲音 引腳%1',
        MOTOR130_CATEGORY: '電機',
        MOTOR130_DIGITAL: '直流電機 INA#%1 電平為%2 INB#%3 電平為%4',
        MOTOR130_ANALOG: '直流電機 INA#%1 電平為%2 INB#%3 通道%4 模擬輸出值%5',
        PIR_CATEGORY: '人體',
        PIR_READ_VALUE: '讀取接口 %1 紅外熱釋電傳感器',
        LIGHTSENSOR_CATEGORY: '光線',
        LIGHTSENSOR_READ_VALUE: '讀取接口%1光線強度',
        SOUNDSENSOR_CATEGORY: '聲音',
        SOUNDSENSOR_READ_VALUE: '讀取接口%1聲音數值',
        ADKEYSENSOR_CATEGORY: '按鍵模組',
        ADKEYSENSOR_READ_VALUE: '讀取接口%1按鍵模組的值',
        HC_SR04_CATEGORY: '超聲波',
        HC_SR04_READ_DISTANCE: '超聲波傳感器 trig 引腳 %1 echo 引腳 %2 讀取距離 %3',
        JOYSTICK_CATEGORY: '搖桿',
        JOYSTICK_XY_VALUE: '讀取PIN腳%1搖桿%2軸',
        KS_SERVO_CATEGORY: '舵機',
        KS_SERVO_ANGLE: '舵機 引腳%1 通道%2 角度%3 延時(毫秒)%4',
        KS_SERVO_READ: '舵機 引腳%1 讀取度數',
        BBRGBLEDSTRIP_CATEGORY: 'RGB',
        BBRGBLEDSTRIP_INIT: '初始化RGB 氛圍燈顆數 %1 引腳 %2',
        BBRGBLEDSTRIP_SETPIXELCOLOR: '設置像素 %1 顏色 %2',
        BBRGBLEDSTRIP_FILL: '從像素 %1 開始 到像素 %2 顏色 %3',
        BBRGBLEDSTRIP_COLOR: 'RGB 氛圍燈顏色 R %1 G %2 B %3',
        BBRGBLEDSTRIP_SETBRIGHTNESS: '設置亮度 %1',
        BBRGBLEDSTRIP_CLEAR: '清除所有',
        BBRGBLEDSTRIP_SHOW: '刷新',   
        BMP388_CATEGORY: '氣壓',
        BMP388_INIT: '初始化 BMP388',
        BMP388_READ: '讀取 BMP388',
        BMP388_SHOW_DATA: '顯示數據 %1',
        AHT20_CATEGORY: '溫濕度',
        AHT20_READ: '溫濕度感測器AHT20讀取 %1',
        AK8975_CATEGORY: '電子羅盤',
        AK8975_INIT: '初始化 AK8975 電子羅盤',
        AK8975_READ: '讀取 AK8975 %1 磁場強度',
        AK8975_DEGREE: '讀取 AK8975磁場方向的角度',
        RC522_CATEGORY: 'RFID',
        RC522_INIT: '初始化 RFID',
        RC522_READ: '讀取卡值',
        OLED_CATEGORY: 'OLED',
        OLED_INIT: '初始化 OLED',
        OLED_SETTEXT: '設置字體大小 %1',
        OLED_SETCURSOR: '設置光標 x: %1 y: %2',
        OLED_PRINT: '打印 %1 %2',
        OLED_EOL_WARP: '換行',
        OLED_EOL_NOWARP: '不換行',
        OLED_IMAGE: 'oled 顯示圖片%1',
        OLED_CLEAR: '清空 oled',
        OLED_REFRESH: '刷新 oled',
        WIFI_CATEGORY: 'WIFI',
        WIFI_INIT: '連接WiFi 名稱%1 密碼%2',
        WIFI_READ_IP: 'WiFi 讀取IP',
        //MODE_TEST:'mode test',
    });
    Object.assign(Blockly.ScratchMsgs.locales['zh-cn'], {
        KS_VARIABLE_LABEL:'变量类型',
        KS_variables_declare:'声明 %1 数字变量 类型 %2 名称 %3 赋值为 %4',
        KS_variables_declare2:'声明 %1 字符串变量 类型 %2 名称 %3 赋值为 %4',
        KS_variables_set:'设置 %1 变量 为 %2',
        KS_variables_change:'设置 %1 变量 模式 %2',
        KS_variables_value: '变量 %1',
        KS_variables_setString:'设置 %1 字符串变量 为 %2',
        KS_global:'全局',
        KS_local:'局部',
        KS_MATH_INT: '整数',
        KS_MATH_LONG: '长整数',
        KS_MATH_FLOAT: '小数',
        KS_MATH_BOOLEAN: '布尔',
        KS_MATH_BYTE: '字节',
        KS_MATH_CHAR: '字符',
        KS_MATH_STRING: '字符串',
        KS_MATH_UNSIGNED_INT: '无符号整数',
        KS_MATH_WORD: '字',
        KS_MATH_UNSIGNED_LONG: '无符号长整数',
        KS_MATH_UNSIGNED_CHAR: '无符号字符',
        KS_MATH_DOUBLE: '双精度浮点数',

        KS_TEXT_LABEL:'文本',
        KS_char: '\'%1\'',
        KS_string: '\"%1\"',
        KS_data: '%1',

        KS_LOGIC_LABEL:'逻辑',
        KS_judge:'%1 %2 %3',
        LED_CATEGORY: 'LED',
        LED_SET_LED_STATE: 'LED 接口%1 输出%2 ',
        LED_ANALOG: 'LED灯 %1 通道%2 模拟输出%3',
        BUZZER_CATEGORY: '扬声器',
        BUZZER_TONE_D: '播放声音 引脚%1 频率%2 节拍%3',
        BUZZER_MUSIC: '扬声器 引脚%1 播放音乐%2',
        BUZZER_NOTONE: '结束声音 引脚%1',
        MOTOR130_CATEGORY: '电机',
        MOTOR130_DIGITAL: '直流电机 INA#%1 电平为%2 INB#%3 电平为%4',
        MOTOR130_ANALOG: '直流电机 INA#%1 电平为%2 INB#%3 通道%4 模拟输出值%5',
        BUTTON_CATEGORY: '按键开关',
        BUTTON_READ_STATE: '接口%1按钮被按下?',
        BUTTON_READ_VALUE: '接口%1按钮的状态值',
        PIR_CATEGORY: '人体',
        PIR_READ_VALUE: '读取接口 %1 红外热释电传感器',
        LIGHTSENSOR_CATEGORY: '光线',
        LIGHTSENSOR_READ_VALUE: '读取接口%1光线强度',
        SOUNDSENSOR_CATEGORY: '声音',
        SOUNDSENSOR_READ_VALUE: '读取接口%1声音数值',
        ADKEYSENSOR_CATEGORY: '按键模块',
        ADKEYSENSOR_READ_VALUE: '读取接口%1按键模块的值',
        HC_SR04_CATEGORY: '超声波',
        HC_SR04_READ_DISTANCE: '超声波传感器 trig 引脚 %1 echo 引脚 %2 读取距离 %3',
        JOYSTICK_CATEGORY: '摇杆',
        JOYSTICK_XY_VALUE: '读取PIN脚%1摇杆%2轴',
        KS_SERVO_CATEGORY: '舵机',
        KS_SERVO_ANGLE: '舵机 引脚%1 通道%2 角度%3 延时(毫秒)%4',
        KS_SERVO_READ: '舵机 引脚%1 读取度数',
        BBRGBLEDSTRIP_CATEGORY: 'RGB',
        BBRGBLEDSTRIP_INIT: '初始化RGB 氛围灯颗数 %1 引脚 %2',
        BBRGBLEDSTRIP_SETPIXELCOLOR: '设置像素 %1 颜色 %2',
        BBRGBLEDSTRIP_FILL: '从像素 %1 开始 到像素 %2 颜色 %3',
        BBRGBLEDSTRIP_COLOR: 'RGB 氛围灯颜色 R %1 G %2 B %3',
        BBRGBLEDSTRIP_SETBRIGHTNESS: '设置亮度 %1',
        BBRGBLEDSTRIP_CLEAR: '清除所有',
        BBRGBLEDSTRIP_SHOW: '刷新',   
        BMP388_CATEGORY: '气压',
        BMP388_INIT: '初始化 BMP388',
        BMP388_READ: '读取 BMP388 数据',
        BMP388_SHOW_DATA: '显示数据 %1',
        AHT20_CATEGORY: '温湿度',
        AHT20_READ: '温湿度传感器AHT20读取 %1',
        AK8975_CATEGORY: '电子罗盘',
        AK8975_INIT: '初始化 AK8975 电子罗盘',
        AK8975_READ: '读取 AK8975 %1 磁场强度',
        AK8975_DEGREE: '读取 AK8975磁场方向的角度',
        RC522_CATEGORY: 'RFID',
        RC522_INIT: '初始化 RFID',
        RC522_READ: '读取卡值',
        OLED_CATEGORY: 'OLED',
        OLED_INIT: '初始化 OLED',
        OLED_SETTEXT: '设置字体大小 %1',
        OLED_SETCURSOR: '设置光标 x: %1 y: %2',
        OLED_PRINT: '打印 %1 %2',
        OLED_EOL_WARP: '换行',
        OLED_EOL_NOWARP: '不换行',
        OLED_IMAGE: 'oled 显示图片%1',
        OLED_CLEAR: '清空 oled',
        OLED_REFRESH: '刷新 oled',
        WIFI_CATEGORY: 'WIFI',
        WIFI_INIT: '连接WiFi 名称%1 密码%2',
        WIFI_READ_IP: 'WiFi 读取IP',
        //MODE_TEST:'mode test',
        
    });
    Object.assign(Blockly.ScratchMsgs.locales['it'], {
        KS_VARIABLE_LABEL: 'Tipo di variabile',
        KS_variables_declare: 'Dichiarare la variabile %1 tipo numero %2 nome %3 con valore %4',
        KS_variables_declare2: 'Dichiarare la variabile %1 tipo stringa %2 nome %3 con valore %4',
        KS_variables_set: 'Imposta la variabile %1 su %2',
        KS_variables_change: 'Imposta la variabile %1 in modalità %2',
        KS_variables_value: 'Variabile %1',
        KS_variables_setString: 'Imposta la variabile stringa %1 su %2',
        KS_global: 'Globale',
        KS_local: 'Locale',
        KS_MATH_INT: 'Intero',
        KS_MATH_LONG: 'Intero lungo',
        KS_MATH_FLOAT: 'Numero decimale',
        KS_MATH_BOOLEAN: 'Booleano',
        KS_MATH_BYTE: 'Byte',
        KS_MATH_CHAR: 'Carattere',
        KS_MATH_STRING: 'Stringa',
        KS_MATH_UNSIGNED_INT: 'Intero senza segno',
        KS_MATH_WORD: 'Parola',
        KS_MATH_UNSIGNED_LONG: 'Intero lungo senza segno',
        KS_MATH_UNSIGNED_CHAR: 'Carattere senza segno',
        KS_MATH_DOUBLE: 'Doppia precisione',
        KS_TEXT_LABEL: 'TESTO',  
        KS_char: 'carattere%1',  
        KS_string: 'stringa%1',  
        KS_data: '%1', 
        KS_LOGIC_LABEL: 'Logica',
        KS_judge: '%1 %2 %3',
        LED_CATEGORY: 'LED',
        LED_SET_LED_STATE: 'LED interfaccia %1 stato %2',
        LED_ANALOG: 'LED %1 canale %2 uscita analogica %3',
        BUZZER_CATEGORY: 'Altoparlante',
        BUZZER_TONE_D: 'Suono su pin %1 frequenza %2 battito %3',
        BUZZER_MUSIC: 'Altoparlante su pin %1 riproduci musica %2',
        BUZZER_NOTONE: 'Ferma suono su pin %1',
        MOTOR130_CATEGORY: 'Motore',
        MOTOR130_DIGITAL: 'Motore DC INA#%1 livello %2 INB#%3 livello %4',
        MOTOR130_ANALOG: 'Motore DC INA#%1 livello %2 INB#%3 canale %4 valore uscita analogica %5',
        BUTTON_CATEGORY: 'Pulsante',
        BUTTON_READ_STATE: 'Pulsante interfaccia %1 premuto?',
        BUTTON_READ_VALUE: 'Stato pulsante interfaccia %1',
        PIR_CATEGORY: 'Infrarossi',
        PIR_READ_VALUE: 'Leggi sensore infrarosso su interfaccia %1',
        LIGHTSENSOR_CATEGORY: 'Luce',
        LIGHTSENSOR_READ_VALUE: 'Leggi intensità luce su interfaccia %1',
        SOUNDSENSOR_CATEGORY: 'Suono',
        SOUNDSENSOR_READ_VALUE: 'Leggi valore suono su interfaccia %1',
        ADKEYSENSOR_CATEGORY: 'Modulo pulsanti',
        ADKEYSENSOR_READ_VALUE: 'Leggi valore modulo pulsanti su interfaccia %1',
        HC_SR04_CATEGORY: 'Ultrasuoni',
        HC_SR04_READ_DISTANCE: 'Sensore ad ultrasuoni trig pin %1 echo pin %2 leggi distanza %3',
        JOYSTICK_CATEGORY: 'Joystick',
        JOYSTICK_XY_VALUE: 'Leggi asse %2 joystick pin %1',
        KS_SERVO_CATEGORY: 'servomotore',
        KS_SERVO_ANGLE: 'servomotore pin %1 canale %2 angolo %3 ritardo (ms) %4',
        KS_SERVO_READ: 'Leggi angolo servomotore su pin %1',
        BBRGBLEDSTRIP_CATEGORY: 'RGB',
        BBRGBLEDSTRIP_INIT: 'Inizializza striscia LED RGB numero di LED %1 pin %2',
        BBRGBLEDSTRIP_SETPIXELCOLOR: 'Imposta colore pixel %1 a %2',
        BBRGBLEDSTRIP_FILL: 'Dal pixel %1 al pixel %2 imposta colore %3',
        BBRGBLEDSTRIP_COLOR: 'Colore LED RGB R %1 G %2 B %3',
        BBRGBLEDSTRIP_SETBRIGHTNESS: 'Imposta luminosità %1',
        BBRGBLEDSTRIP_CLEAR: 'Pulisci tutto',
        BBRGBLEDSTRIP_SHOW: 'Aggiorna',
        BMP388_CATEGORY: 'Pressione atmosferica',
        BMP388_INIT: 'Inizializza BMP388',
        BMP388_READ: 'Leggi dati BMP388',
        BMP388_SHOW_DATA: 'Mostra dati %1',
        AHT20_CATEGORY: 'Temperatura e umidità',
        AHT20_READ: 'Leggi sensore temperatura/umidità AHT20 %1',
        AK8975_CATEGORY: 'Bussola elettronica',
        AK8975_INIT: 'Inizializza AK8975 bussola elettronica',
        AK8975_READ: 'Leggi intensità del campo magnetico AK8975 %1',
        AK8975_DEGREE: 'Leggi angolo direzione del campo magnetico AK8975',
        RC522_CATEGORY: 'RFID',
        RC522_INIT: 'Inizializza RFID',
        RC522_READ: 'Leggi valore carta RFID',
        OLED_CATEGORY: 'OLED',
        OLED_INIT: 'Inizializza OLED',
        OLED_SETTEXT: 'Imposta dimensione font %1',
        OLED_SETCURSOR: 'Imposta cursore x: %1 y: %2',
        OLED_PRINT: 'Stampa %1 %2',
        OLED_EOL_WARP: 'Nuova linea',
        OLED_EOL_NOWARP: 'Nessuna nuova linea',
        OLED_IMAGE: 'Mostra immagine OLED %1',
        OLED_CLEAR: 'Pulisci OLED',
        OLED_REFRESH: 'Aggiorna OLED',
        WIFI_CATEGORY: 'WiFi',
        WIFI_INIT: 'Connetti a WiFi nome %1 password %2',
        WIFI_READ_IP: 'Leggi IP WiFi',
    });    
    return Blockly;
}

exports = addMsg;
